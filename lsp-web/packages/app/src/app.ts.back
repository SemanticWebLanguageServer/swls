import {} from "monaco-languageclient";
// monaco-editor does not supply json highlighting with the json worker,
// that's why we use the textmate extension from VSCode
import * as monaco from "monaco-editor";
import { MonacoLanguageClient } from "monaco-languageclient";
import {
  CloseAction,
  ErrorAction,
  MessageTransports,
} from "vscode-languageclient/browser.js";
import { NewClient } from "./client";
import { FromServer, IntoServer } from "./codec";
import Server from "./server";
import { initServices } from "monaco-languageclient/vscode/services";

class Environment implements monaco.Environment {
  getWorkerUrl(moduleId: string, label: string) {
    if (label === "editorWorkerService") {
      return "./editor.worker.bundle.js";
    }
    throw new Error(
      `getWorkerUrl: unexpected ${JSON.stringify({ moduleId, label })}`
    );
  }
}

// const monacoToProtocol = new MonacoToProtocolConverter(monaco);

export default class App {
  readonly #window: Window & typeof globalThis = self;

  readonly #intoServer: IntoServer = new IntoServer();
  readonly #fromServer: FromServer = FromServer.create();

  initializeMonaco(): void {
    this.#window.MonacoEnvironment = new Environment();
  }

  //   createModel(client: Client): monaco.editor.ITextModel {
  //     const language = Language.initialize(client);
  //
  //     const value = `
  // @prefix rml: <http://w3id.org/rml/core#>.
  // @prefix tree: <https://w3id.org/tree#>.
  // @prefix foaf: <http://xmlns.com/foaf/0.1/>.
  //
  //
  // [ ] a foaf:Project;
  //   foaf:name "Arthur", "Testing";.
  //
  // <a> a foaf:Person;
  //   foaf:name "ben"^^xsd:string;
  //   foaf:nick "Benny".
  // `.replace(/^\s*\n/gm, "");
  //     const id = language.id;
  //     const uri = monaco.Uri.parse("inmemory://demo.ttl");
  //
  //     const model = monaco.editor.createModel(value, id, uri);
  //
  //     model.onDidChangeContent(
  //       debounce(() => {
  //         const text = model.getValue();
  //         client.notify(proto.DidChangeTextDocumentNotification.type.method, {
  //           textDocument: {
  //             version: 0,
  //             uri: model.uri.toString(),
  //           },
  //           contentChanges: [
  //             {
  //               range: monacoToProtocol.asRange(model.getFullModelRange()),
  //               text,
  //             },
  //           ],
  //         } as proto.DidChangeTextDocumentParams);
  //       }, 200)
  //     );
  //
  //     // eslint-disable-next-line @typescript-eslint/require-await
  //     client.pushAfterInitializeHook(async () => {
  //       client.notify(proto.DidOpenTextDocumentNotification.type.method, {
  //         textDocument: {
  //           uri: model.uri.toString(),
  //           languageId: language.id,
  //           version: 0,
  //           text: model.getValue(),
  //         },
  //       } as proto.DidOpenTextDocumentParams);
  //     });
  //
  //     return model;
  //   }

  // createEditor(client: Client): void {
  //   const container = document.getElementById("editor")!; // eslint-disable-line @typescript-eslint/no-non-null-assertion
  //   this.initializeMonaco();
  //   // const model = this.createModel(client);
  //   monaco.editor.create(container, {
  //     model,
  //     automaticLayout: true,
  //   });
  // }

  createLanguageClient(
    messageTransports: MessageTransports
  ): MonacoLanguageClient {
    return new MonacoLanguageClient({
      name: "Sample Language Client",
      clientOptions: {
        // use a language id as a document selector
        documentSelector: ["turtle"],
        // disable the default error handler
        errorHandler: {
          error: () => ({ action: ErrorAction.Continue }),
          closed: () => ({ action: CloseAction.DoNotRestart }),
        },
      },
      messageTransports,
    });
  }

  runClient = async () => {
    const htmlContainer = document.getElementById("editor")!;
    // this.initializeMonaco();
    await initServices({}, {});
    // await initServices(
    //   {
    //     serviceOverrides: {},
    //   },
    //   {
    //     htmlContainer,
    //     logger,
    //   }
    // );

    // register the JSON language with Monaco
    const id = "turtle";
    const aliases = ["Turtle", "ttl"];
    const extensions = [".ttl"];
    const mimetypes = ["text/turtle"];
    monaco.languages.register({ id, extensions, aliases, mimetypes });

    // create monaco editor
    const value = `
@prefix rml: <http://w3id.org/rml/core#>.
@prefix tree: <https://w3id.org/tree#>.
@prefix foaf: <http://xmlns.com/foaf/0.1/>.


[ ] a foaf:Project;
  foaf:name "Arthur", "Testing";.

<a> a foaf:Person;
  foaf:name "ben"^^xsd:string;
  foaf:nick "Benny".
`.replace(/^\s*\n/gm, "");
    monaco.editor.create(htmlContainer, {
      value,
      language: "turtle",
      automaticLayout: true,
      wordBasedSuggestions: "off",
    });
  };

  async run(): Promise<void> {
    // const client = new Client(this.#fromServer, this.#intoServer);
    const newClient = new NewClient(this.#fromServer, this.#intoServer);
    const server = await Server.initialize(this.#intoServer, this.#fromServer);

    const client = this.createLanguageClient({
      writer: newClient.writer(),
      reader: newClient.reader(),
    });

    await Promise.all([server.start(), client.start()]);
  }
}

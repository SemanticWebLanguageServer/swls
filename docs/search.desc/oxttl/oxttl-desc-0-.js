searchState.loadedDescShard("oxttl", 0, "OxTTL\nI/O error during parsing (file not found…).\nAn error in the file syntax.\nA position in a text i.e. a <code>line</code> number starting from 0, a …\nA parsing error.\nAn error in the syntax of the parsed file.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe location of the error inside of the file.\nThe error message.\nA N3 streaming parser implemented by <code>N3Parser</code>.\nA N-Quads streaming parser implemented by <code>NQuadsParser</code> and …\nA N-Triples streaming parser implemented by <code>NTriplesParser</code> …\nA TriG streaming parser implemented by <code>TriGParser</code> and a …\nA Turtle streaming parser implemented by <code>TurtleParser</code> and …\nParses a N3 file by using a low-level API.\nA N3 streaming parser.\nIterator on the file prefixes.\nA N3 quad i.e. a quad composed of <code>N3Term</code>.\nA N3 term i.e. a RDF <code>Term</code> or a <code>Variable</code>.\nParses a N3 file from a <code>Read</code> implementation.\nParses a N3 file from a byte slice.\nThe base IRI considered at the current step of the parsing.\nThe base IRI considered at the current step of the parsing.\nThe base IRI considered at the current step of the parsing.\nTell the parser that the file is finished.\nAdds some extra bytes to the parser. Should be called when …\nParses a N3 file from a <code>Read</code> implementation.\nParses a N3 file from a byte slice.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe name of the RDF graph in which the triple is.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns if the parsing is finished i.e. <code>end</code> has been …\nAllows to parse a N3 file by using a low-level API.\nBuilds a new <code>N3Parser</code>.\nThe object of this triple.\nAttempt to parse a new quad from the already provided data.\nThe predicate of this triple.\nThe list of IRI prefixes considered at the current step of …\nThe list of IRI prefixes considered at the current step of …\nThe list of IRI prefixes considered at the current step of …\nThe subject of this triple.\nAssumes the file is valid to make parsing faster.\nParses a N-Quads file by using a low-level API.\nWrites a N-Quads file by using a low-level API.\nA N-Quads streaming parser.\nA N-Quads serializer.\nParses a N-Quads file from a <code>Read</code> implementation.\nParses a N-Quads file from a byte slice.\nWrites a N-Quads file to a <code>Write</code> implementation.\nTell the parser that the file is finished.\nAdds some extra bytes to the parser. Should be called when …\nEnds the write process and returns the underlying <code>Write</code>.\nParses a N-Quads file from a <code>Read</code> implementation.\nParses a N-Quads file from a byte slice.\nWrites a N-Quads file to a <code>Write</code> implementation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns if the parsing is finished i.e. <code>end</code> has been …\nAllows to parse a N-Quads file by using a low-level API.\nBuilds a low-level N-Quads writer.\nBuilds a new <code>NQuadsParser</code>.\nBuilds a new <code>NQuadsSerializer</code>.\nAttempt to parse a new quad from the already provided data.\nWrites an extra quad.\nWrites an extra quad.\nCreates a vector of iterators that may be used to parse an …\nAssumes the file is valid to make parsing faster.\nEnables N-Quads-star.\nParses a N-Triples file by using a low-level API.\nWrites a N-Triples file by using a low-level API.\nA N-Triples streaming parser.\nA canonical N-Triples serializer.\nParses a N-Triples file from a <code>Read</code> implementation.\nParses a N-Triples file from a byte slice.\nWrites a N-Triples file to a <code>Write</code> implementation.\nTell the parser that the file is finished.\nAdds some extra bytes to the parser. Should be called when …\nEnds the write process and returns the underlying <code>Write</code>.\nParses a N-Triples file from a <code>Read</code> implementation.\nParses a N-Triples file from a byte slice.\nWrites a N-Triples file to a <code>Write</code> implementation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns if the parsing is finished i.e. <code>end</code> has been …\nAllows to parse a N-Triples file by using a low-level API.\nBuilds a low-level N-Triples writer.\nBuilds a new <code>NTriplesParser</code>.\nBuilds a new <code>NTriplesSerializer</code>.\nAttempt to parse a new triple from the already provided …\nWrites an extra triple.\nWrites an extra triple.\nCreates a vector of iterators that may be used to parse an …\nAssumes the file is valid to make parsing faster.\nEnables N-Triples-star.\nParses a TriG file by using a low-level API.\nWrites a TriG file by using a low-level API.\nParses a TriG file from a <code>Read</code> implementation.\nParses a TriG file from a byte slice.\nA TriG streaming parser.\nIterator on the file prefixes.\nA TriG serializer.\nWrites a TriG file to a <code>Write</code> implementation.\nThe base IRI considered at the current step of the parsing.\nThe base IRI considered at the current step of the parsing.\nThe base IRI considered at the current step of the parsing.\nTell the parser that the file is finished.\nAdds some extra bytes to the parser. Should be called when …\nEnds the write process and returns the underlying <code>Write</code>.\nFinishes to write the file.\nParses a TriG file from a <code>Read</code> implementation.\nParses a TriG file from a byte slice.\nWrites a TriG file to a <code>Write</code> implementation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns if the parsing is finished i.e. <code>end</code> has been …\nAllows to parse a TriG file by using a low-level API.\nBuilds a low-level TriG writer.\nBuilds a new <code>TriGParser</code>.\nBuilds a new <code>TriGSerializer</code>.\nAttempt to parse a new quad from the already provided data.\nThe list of IRI prefixes considered at the current step of …\nThe list of IRI prefixes considered at the current step of …\nThe list of IRI prefixes considered at the current step of …\nWrites an extra quad.\nWrites an extra quad.\nAssumes the file is valid to make parsing faster.\nAdds a base IRI to the serialization.\nEnables TriG-star.\nParses a Turtle file by using a low-level API.\nWrites a Turtle file by using a low-level API.\nParses a Turtle file from a <code>Read</code> implementation.\nParses a Turtle file from a byte slice.\nA Turtle streaming parser.\nIterator on the file prefixes.\nA Turtle serializer.\nWrites a Turtle file to a <code>Write</code> implementation.\nThe base IRI considered at the current step of the parsing.\nThe base IRI considered at the current step of the parsing.\nThe base IRI considered at the current step of the parsing.\nTell the parser that the file is finished.\nAdds some extra bytes to the parser. Should be called when …\nEnds the write process and returns the underlying <code>Write</code>.\nFinishes to write the file.\nParses a Turtle file from a <code>Read</code> implementation.\nParses Turtle file from a byte slice.\nWrites a Turtle file to a <code>Write</code> implementation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns if the parsing is finished i.e. <code>end</code> has been …\nAllows to parse a Turtle file by using a low-level API.\nBuilds a low-level Turtle writer.\nBuilds a new <code>TurtleParser</code>.\nBuilds a new <code>TurtleSerializer</code>.\nAttempt to parse a new triple from the already provided …\nThe list of IRI prefixes considered at the current step of …\nThe list of IRI prefixes considered at the current step of …\nThe list of IRI prefixes considered at the current step of …\nWrites an extra triple.\nWrites an extra triple.\nCreates a vector of iterators that may be used to parse a …\nAssumes the file is valid to make parsing faster.\nAdds a base IRI to the serialization.\nEnables Turtle-star.")
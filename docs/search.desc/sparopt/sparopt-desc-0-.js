searchState.loadedDescShard("sparopt", 0, "sparopt\nSPARQL 1.1 Query Algebra representation.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nop:numeric-add and other XSD additions.\nA set function used in aggregates (c.f. <code>GraphPattern::Group</code>…\nLogical-and.\nAscending order\nBOUND.\nCOALESCE.\nDescending order\nDistinct.\nop:numeric-divide and other XSD divides.\nRDFterm-equal and all the XSD equalities.\nEXISTS.\nAn expression.\nExtend.\nFilter.\nA function name.\nA regular function call.\nA SPARQL query graph pattern.\nop:numeric-greater-than and other XSD greater than …\nThe union of IRIs, literals and triples.\nThe union of terms and variables without blank nodes.\nGroup.\nIF.\nJoin.\nThe join algorithm used (c.f. <code>GraphPattern::Join</code>).\nLateral join i.e. evaluate right for all result row of left\nLeftJoin.\nThe left join algorithm used (c.f. <code>GraphPattern::LeftJoin</code>).\nop:numeric-less-than and other XSD greater than operators.\nAn owned RDF literal.\nMinus.\nThe left join algorithm used (c.f. <code>GraphPattern::Minus</code>).\nop:numeric-multiply and other XSD multiplications.\nAn owned RDF IRI.\nThe union of IRIs and variables.\nfn:not.\nLogical-or.\nOrderBy.\nAn ordering comparator used by <code>GraphPattern::OrderBy</code>.\nA property path pattern.\nProject.\nA property path expression.\nA basic graph pattern.\nReduced.\nsameTerm.\nService.\nSlice.\nop:numeric-subtract and other XSD subtractions.\nop:numeric-unary-minus and other XSD unary minus.\nop:numeric-unary-plus and other XSD unary plus.\nUnion.\nA table used to provide inline values\nA SPARQL query owned variable.\nThe literal datatype.\nExtract components from this literal (value, datatype and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParses a literal from its NTriples serialization\nParses a named node from its NTriples and Turtle …\nParses a variable from its SPARQL serialization\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if this literal could be seen as an RDF 1.0 plain …\nThe literal language tag if it is a language-tagged string.\nBuilds and validate an RDF IRI.\nCreates a variable name from a unique identifier.\nBuilds an RDF language-tagged string.\nBuilds an RDF language-tagged string.\nBuilds an RDF simple literal.\nBuilds an RDF literal with a datatype.\nBuilds an RDF IRI from a string.\nCreates a variable name from a unique identifier without …\nThe literal lexical form.")
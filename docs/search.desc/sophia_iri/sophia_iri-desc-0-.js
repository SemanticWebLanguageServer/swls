searchState.loadedDescShard("sophia_iri", 0, "This crate provides functions for validating IRIs and IRI …\nAutomatic trait for <code>IsIri</code>, providing cheap conversion to …\nAutomatic trait for <code>IsIriRef</code>, providing cheap conversion …\nContains the error value\nThis error is raised when trying to parse an invalid IRI.\nSee <code>Iri::new</code>.\nSee <code>IriRef::new</code>.\nMarker trait guaranteeing that the underlying <code>str</code> is a …\nMarker trait guaranteeing that the underlying <code>str</code> is a …\nContains the success value\nType alias for <code>Result</code> with default error <code>TermError</code>.\nBorrow this IRI as a <code>BaseIri</code> providing more efficient and …\nBorrow this IRI as a <code>BaseIriRef</code> providing more efficient …\nExtract an <code>Iri</code> wrapping the underlying <code>str</code>.\nExtract an <code>IriRef</code> wrapping the underlying <code>str</code>.\nConvert from <code>&amp;Iri&lt;T&gt;</code> to <code>Iri&lt;&amp;str&gt;</code>.\nConvert from <code>&amp;IriRef&lt;T&gt;</code> to <code>IriRef&lt;&amp;str&gt;</code>.\nGets a reference to the underlying &amp;str.\nGets a reference to the underlying &amp;str.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck whether <code>txt</code> is an absolute IRI reference.\nCheck whether <code>txt</code> is a relative IRI reference.\nCheck whether <code>txt</code> is a valid (absolute or relative) IRI …\nCheck whether <code>ns</code> and <code>suffix</code> concatenate into a valid …\nMap a <code>Iri&lt;T&gt;</code> to a <code>Iri&lt;U&gt;</code> by applying a function to the …\nMap a <code>IriRef&lt;T&gt;</code> to a <code>IriRef&lt;U&gt;</code> by applying a function to …\nThis wrapper guarantees that the underlying <code>str</code> satisfies …\nThis wrapper guarantees that the underlying <code>str</code> satisfies …\nConstruct a <code>Iri&lt;T&gt;</code> without checking that the inner value …\nConstruct a <code>IriRef&lt;T&gt;</code> without checking that the inner …\nConstruct a <code>Iri&lt;&amp;&#39;static str&gt;</code> without checking that the …\nConstruct a <code>IriRef&lt;&amp;&#39;static str&gt;</code> without checking that the …\nImplementation of IRI resolution as per [RFC 3987].\nResolve a relative IRI reference against this one.\nResolve a relative IRI reference against this one.\nTurn this IRI into a <code>BaseIri</code> providing more efficient and …\nTurn this IRI into a <code>BaseIriRef</code> providing more efficient …\nReturns the wrapped value, consuming <code>self</code>.\nReturns the wrapped value, consuming <code>self</code>.\nThis macro is used to create a read-only wrapper around a …\nA <code>BaseIri</code> is an absolute IRI against which relative IRIs …\nA <code>BaseIriRef</code> is an absolute or relative IRI reference, …\nAn error raised during <code>Iri</code> or <code>IriRef</code> validation.\nThe output type when joining to an absolute base.\nThe output type when joining to an relative base.\nA RFC 3987 IRI.\nA RFC 3987 IRI reference.\nA trait for anything that can be resolved against a <code>BaseIri</code>…\nReturns an <code>IriRef</code> borrowing this IRI’s text.\nReturns an IRI borrowing this IRI’s text\nReturns the underlying IRI representation.\nReturns the underlying IRI representation.\nReturns the IRI authority if it exists.\nReturns the IRI authority if it exists.\nReturns the IRI fragment if it exists.\nReturns the IRI fragment if it exists.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the underlying IRI representation.\nReturns the underlying IRI representation.\nWhether this IRI is an absolute IRI reference or not.\nCreates a new <code>BaseIri</code> if <code>iri</code> is a valid IRI, otherwise …\nCreates a new <code>BaseIriRef</code> if <code>iri</code> is a valid IRI, otherwise …\nMethod for producing the <code>Self::OutputAbs</code> from a raw result.\nMethod for producing the <code>Self::OutputRel</code> from a raw result.\nParses and validates the IRI-reference following the …\nParses and validates the IRI following the grammar from …\nVariant of <code>parse</code> that assumes that the IRI is valid to …\nVariant of <code>parse</code> that assumes that the IRI is valid to …\nReturns the IRI path.\nReturns the IRI path.\nReturns the IRI query if it exists.\nReturns the IRI query if it exists.\nReturns an IRI that, when resolved against the current IRI …\nValidates and resolved a relative IRI against the current …\nResolves <code>iri</code> against this <code>BaseIri</code>.\nValidates and resolved a relative IRI against the current …\nResolves <code>iri</code> against this <code>BaseIriRef</code>.\nValidates and resolved a relative IRI against the current …\nResolves <code>iri</code> against this <code>BaseIri</code>, using <code>buf</code> to store the …\nValidates and resolved a relative IRI against the current …\nResolves <code>iri</code> against this <code>BaseIriRef</code>, using <code>buf</code> to store …\nVariant of <code>resolve_into</code> that assumes that the IRI is valid …\nVariant of <code>resolve_into</code> that assumes that the IRI is valid …\nVariant of <code>resolve</code> that assumes that the IRI is valid to …\nVariant of <code>resolve</code> that assumes that the IRI is valid to …\nReturns the IRI scheme if it exists.\nReturns the IRI scheme.\nConvert this to a <code>BaseIri</code>.")
searchState.loadedDescShard("sophia_api", 0, "This crate provides a foundation, as a set of traits and …\nRe-export MownStr to avoid dependency version mismatch.\nAn RDF dataset is composed of a default dataset, and zero …\nDefine convenience module-level functions for a parser …\nReturns the argument unchanged.\nAn RDF graph, the central notion of the RDF data model, is …\nCalls <code>U::from(self)</code>.\nCreate a “namespace module” defining a set of terms …\nStandard and custom namespaces.\nCreate a term in a “namespace module”. In general, you …\nAPI for parsing RDF syntaxes.\nRDF-related languages (e.g. Turtle, SPARQL) often use …\nGeneral-use types and traits from the Sophia API.\nA quad expresses a single fact within a context. Quads are …\nAPI for serializing RDF syntaxes.\nA source yields items, and may also fail in the process. …\nCommon traits for working with SPARQL.\nI define how RDF terms (such as IRIs, blank nodes and …\nConvert this <code>MownStr</code> to any type <code>T</code> that can be created …\nI define how RDF triples are represented in Sophia.\nA <code>Dataset</code> that can be constructed from a <code>QuadSource</code>\nType alias for fallible quad iterators produced by a …\nType alias for results produced by a dataset.\nType alias for terms produced by a dataset.\nType alias for fallible term iterators produced by a …\nGeneric trait for RDF datasets.\nContains the error value\nContains the error value\nThe error type that this dataset may raise.\nType alias for results produced by a mutable dataset.\nGeneric trait for mutable RDF datasets.\nThe error type that this dataset may raise during …\nContains the success value\nContains the success value\nDetermine the type of <code>Quad</code>s that the methods of this …\nMarker trait constraining the semantics of <code>Dataset</code> and …\nI define adapters for the <code>dataset</code> related traits.\nBuild a fallible iterator of all the blank nodes used in …\nReturn <code>true</code> if this dataset contains the given quad.\nConstruct a dataset from the given source\nBorrows one of the graphs of this dataset\nBorrows mutably one of the graphs of this dataset\nBuild a fallible iterator of all the terms used as graph …\nInsert the given quad in this dataset.\nInsert into this dataset all quads from the given source.\nInsert in this graph the given quad.\nConvert into a graph that is the union of all this dataset…\nBuild a fallible iterator of all the IRIs used in this …\nBuild a fallible iterator of all the literals used in this …\nBuild a fallible iterator of all the terms used as object …\nBorrows a graph that is the union of some of this dataset…\nBuild a fallible iterator of all the terms used as …\nAn iterator visiting all quads of this dataset in …\nAn iterator visiting all quads matching the given subject, …\nBuild a fallible iterator of all the quoted triples used …\nRemove the given quad from this dataset.\nRemove from this dataset all quads from the given source.\nRemove all quads matching the given matchers.\nRemove from this graph a the given quad.\nKeep only the quads matching the given matchers.\nBuild a fallible iterator of all the terms used as subject …\nBorrows a graph that is the union of all this dataset’s …\nBuild a fallible iterator of all the variables used in …\nError in the underlying graph.\nI wrap a <code>Graph</code> as a <code>Dataset</code> containing only that graph as …\nError raised by mutating a <code>GraphAsDataset</code>.\nCan not insert a quad in a named graph.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWrap the given graph with the given name.\nUnwrap the inner graph and name.\nA <code>Graph</code> that can be constructed from a <code>TripleSource</code>\nContains the error value\nContains the error value\nThe error type that this graph may raise.\nType alias for results produced by a graph.\nType alias for terms produced by a graph.\nType alias for fallible term iterators produced by a graph.\nType alias for fallible triple iterators produced by a …\nGeneric trait for RDF graphs.\nType alias for results produced by a mutable graph.\nGeneric trait for mutable RDF graphs.\nThe error type that this graph may raise during mutations.\nContains the success value\nContains the success value\nMarker trait constraining the semantics of <code>Graph</code> and …\nDetermine the type of <code>Triple</code>s that the methods of this …\nI define adapters for the <code>graph</code> related traits.\n<code>Dataset</code> adapter borrowing this graph\n<code>Dataset</code> adapter borrowing this graph mutably\nBuild a fallible iterator of all the blank nodes used in …\nReturn <code>true</code> if this graph contains the given triple.\nConstruct a graph from the given source\nInsert in this graph a triple made of the the given terms.\nInsert into this graph all triples from the given source.\nInsert in this graph the given triple.\n<code>Dataset</code> adapter taking ownership of this graph\nBuild a fallible iterator of all the IRIs used in this …\nBuild a fallible iterator of all the literals used in this …\nBuild a fallible iterator of all the terms used as object …\nBuild a fallible iterator of all the terms used as …\nBuild a fallible iterator of all the quoted triples used …\nRemove from this graph the triple made of the the given …\nRemove from this graph all triples from the given source.\nRemove all triples matching the given matchers.\nRemoe from this graph the given triple.\nKeep only the triples matching the given matchers.\nBuild a fallible iterator of all the terms used as subject …\nAn iterator visiting all triples of this graph in …\nAn iterator visiting all triples matching the given …\nBuild a fallible iterator of all the variables used in …\nI wrap a <code>Dataset</code> as a <code>Graph</code> corresponding to a specific …\nI wrap a <code>Dataset</code> as a <code>Graph</code> corresponding to the union of …\nI wrap a <code>Dataset</code> as a <code>Graph</code> corresponding to the union of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWrap the given dataset as a the union of all its graphs.\nWrap the given dataset as a single <code>Graph</code> (selected via the …\nWrap the given dataset as a single <code>Graph</code> (selected via the …\nUnwrap the inner <code>Dataset</code>.\nUnwrap the inner <code>GraphName</code> and <code>Dataset</code>.\nUnwrap the inner <code>GraphName</code> and <code>Dataset</code>.\nSee <code>IriRef::new</code>.\nA custom namespace.\nA <code>Term</code> produced by a <code>Namespace</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuild an IRI by appending <code>suffix</code> to this namespace.\nBuild an IRI by appending <code>suffix</code> to this namespace, …\nConsume this Namespace and return the inner <code>IriRef</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn an <code>IriRef</code> representing this term.\nCreate a “namespace module” defining a set of terms …\nBuild a custom namespace based on the given IRI.\nBuild a custom namespace based on the given IRI, without …\nMake an NsTerm without checking that it produces a valid …\n<code>const</code> constructor for <code>Namespace</code>\nCreate a term in a “namespace module”. In general, you …\nThe standard <code>owl:</code> namespace\nThe standard <code>rdf:</code> namespace.\nThe standard <code>rdfs:</code> namespace.\nReturn an <code>IriRef</code> representing this term.\nThe standard <code>xml:</code> namespace\nThe standard <code>xsd:</code> namespace.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nPrefix used in this namespace.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nPrefix used in this namespace.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nPrefix used in this namespace.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nPrefix used in this namespace.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nPrefix used in this namespace.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nUtility trait to support <code>TripleParser::parse_str</code> and …\nA parser takes some data of type <code>T</code>, and returns a …\nThe source produced by this parser\nThe source produced by this parser\nThe parsable type this type can be converted to.\nA parser takes some data of type <code>T</code>, and returns a …\nConvert into the parsable target type\nParses data into a triple source.\nParses data into a quad source.\nConvenient shortcut method for parsing strings.\nConvenient shortcut method for parsing strings.\nAutomatic trait for <code>IsPrefix</code>, providing cheap conversion …\nThis error is raised when trying to parse an invalid IRI.\nMarker trait guaranteeing that the underlying <code>str</code> is a …\nSee <code>Prefix::new</code>.\nA prefix map associates prefixes to namespaces.\nType alias for the return type of <code>PrefixMap::to_vec</code>.\nExtract an <code>Prefix</code> wrapping the underlying <code>str</code>.\nConvert from <code>&amp;Prefix&lt;T&gt;</code> to <code>Prefix&lt;&amp;str&gt;</code>.\nGets a reference to the underlying &amp;str.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn a prefix-suffix pair describing the given IRI, if …\nReturn the IRI associated to this prefix, if any.\nReturn a prefix-suffix pair describing the given IRI, if …\nReturn a prefix-suffix pair describing the given IRI, if …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck whether a <code>str</code> is a valid Turtle/SPARQL prefix …\nIterate over (prefix, IRI) pairs.\nMap a <code>Prefix&lt;T&gt;</code> to a <code>Prefix&lt;U&gt;</code> by applying a function to …\nThis wrapper guarantees that the underlying <code>str</code> satisfies …\nConstruct a <code>Prefix&lt;T&gt;</code> without checking that the inner …\nConstruct a <code>Prefix&lt;&amp;&#39;static str&gt;</code> without checking that the …\nCopies this prefix map as a self-sufficient vector\nCopies this prefix map as a self-sufficient vector\nReturns the wrapped value, consuming <code>self</code>.\nSee <code>Iri::new</code>.\nSee <code>IriRef::new</code>.\nBorrow this IRI as a <code>BaseIri</code> providing more efficient and …\nBorrow this IRI as a <code>BaseIriRef</code> providing more efficient …\nConvert from <code>&amp;Iri&lt;T&gt;</code> to <code>Iri&lt;&amp;str&gt;</code>.\nConvert from <code>&amp;IriRef&lt;T&gt;</code> to <code>IriRef&lt;&amp;str&gt;</code>.\nGets a reference to the underlying &amp;str.\nGets a reference to the underlying &amp;str.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMap a <code>Iri&lt;T&gt;</code> to a <code>Iri&lt;U&gt;</code> by applying a function to the …\nMap a <code>IriRef&lt;T&gt;</code> to a <code>IriRef&lt;U&gt;</code> by applying a function to …\nThis wrapper guarantees that the underlying <code>str</code> satisfies …\nThis wrapper guarantees that the underlying <code>str</code> satisfies …\nConstruct a <code>Iri&lt;T&gt;</code> without checking that the inner value …\nConstruct a <code>IriRef&lt;T&gt;</code> without checking that the inner …\nConstruct a <code>Iri&lt;&amp;&#39;static str&gt;</code> without checking that the …\nConstruct a <code>IriRef&lt;&amp;&#39;static str&gt;</code> without checking that the …\nResolve a relative IRI reference against this one.\nResolve a relative IRI reference against this one.\nTurn this IRI into a <code>BaseIri</code> providing more efficient and …\nTurn this IRI into a <code>BaseIriRef</code> providing more efficient …\nReturns the wrapped value, consuming <code>self</code>.\nReturns the wrapped value, consuming <code>self</code>.\nAn alternative structure representing a Quad of terms T …\nType alias for terms borrowed from a quad.\nThis trait represents an abstract RDF quad, and provide …\nThe typical structure representing a Quad of terms T\nThe type of <code>Term</code> used by this quad when borrowing it\nCheck whether <code>other</code> is term-wise equal (using <code>Term::eq</code>) to …\nCheck whether the quad (<code>s</code>, <code>p</code>, <code>o</code>) is term-wise equal (using …\nThe graph name of this quad.\nConvert this quad to a <code>Triple</code> (dropping the graph name)\nIter over all the components of a <code>Quad</code>\nChecks that the constituents terms of this quad match the …\nThe object of this quad.\nThe predicate of this quad.\nThe subject of this quad.\nThe four components of this quad, as a quad of borrowed …\nConsume this quad, returning its graph name.\nConsume this quad, returning its object.\nConsume this quad, returning its predicate.\nConsume this quad, returning its subject.\nConsume this quad, returning all its components.\nThe error type that may be raised during serialization.\nThe error type that may be raised during serialization.\nA quad serializer writes quads according to a given format.\nA stringifier is special kind of <code>TripleSerializer</code> or …\nA triple serializer writes triples according to a given …\nBorrows the internal serialized data as a <code>str</code>.\nBorrows the internal serialized data.\nSerialize a whole <code>Dataset</code>.\nSerialize a whole <code>Graph</code>.\nSerialize all quads from the given <code>QuadSource</code>.\nSerialize all triples from the given <code>TripleSource</code>.\nCopy the internal serialized data to a <code>String</code>.\nContains the error value\nThe type of errors produced by this source.\nThe type of errors produced by this source.\nAn extension trait for iterators, converting them to an …\nAn extension trait for iterators, converting them to an …\nContains the success value\nThe type of quads this source yields.\nA quad source produces quads, and may also fail in the …\nError caused by the sink\nError caused by the source\nA error that is raised by functions that move fallible …\nConvenient type alias for <code>Result</code> whose error is <code>StreamError</code>…\nAdditional methods for <code>StreamResult</code>\nThe type of triples this source yields.\nA triple source produces triples, and may also fail in the …\nInsert all quads from this source into the given …\nInsert all quads from this source into the given …\nInsert all triples from this source into the given …\nInsert all triples from this source into the given …\nCollect these quads into a new dataset.\nCollect these quads into a new dataset.\nCollect these triples into a new graph.\nCollect these triples into a new graph.\nI define <code>ToQuads</code> and <code>ToQuads</code>, the result type of …\nI define <code>FilterTripleSource</code> and <code>FilterQuadSource</code>, the …\nI define <code>FilterMapTripleSource</code> and <code>FilterMapQuadSource</code>, …\nReturns a source that both filters and maps.\nReturns a source that both filters and maps.\nReturns a source that both filters and maps.\nReturns a source that both filters and maps.\nReturns a source which uses <code>predicate</code> to determine if an …\nReturns a source which uses <code>predicate</code> to determine if an …\nReturns a source which uses <code>predicate</code> to determine if an …\nReturns a source which uses <code>predicate</code> to determine if an …\nCall f for all quads from this source.\nCall f for all quads from this source.\nCall f for all triples from this source.\nCall f for all triples from this source.\nCall f for some quad(s) (possibly zero) from this source, …\nCall f for some quad(s) (possibly zero) from this source, …\nCall f for some triple(s) (possibly zero) from this …\nCall f for some triple(s) (possibly zero) from this …\nReturns the argument unchanged.\nConverts <code>StreamError</code> into an inner error.\nCalls <code>U::from(self)</code>.\nConvert this iterator into an <code>Infallible</code> <code>QuadSource</code>.\nConvert this iterator into an <code>Infallible</code> <code>QuadSource</code>.\nConvert this iterator into an <code>Infallible</code> <code>TripleSource</code>.\nConvert this iterator into an <code>Infallible</code> <code>TripleSource</code>.\nChecks if <code>StreamError</code> was raised by the <code>Sink</code>.\nChecks if <code>StreamError</code> was raised by the <code>Source</code>.\nI define <code>MapTripleSource</code> and <code>MapQuadSource</code>, the result …\nReturns a source which yield the result of <code>map</code> for each …\nReturns a source which yield the result of <code>map</code> for each …\nConvert using <code>f</code> if a <code>SinkError</code>\nMap the error if it is a <code>SinkError</code>\nConvert using <code>f</code> if a <code>SourceError</code>\nMap the error if it is a <code>SourceError</code>\nReturns a source which yield the result of <code>map</code> for each …\nReturns a source which yield the result of <code>map</code> for each …\nSwitch source and sink error.\nReturns the bounds on the remaining length of the source.\nReturns the bounds on the remaining length of the source.\nReturns the bounds on the remaining length of the source.\nReturns the bounds on the remaining length of the source.\nConvert of triples in this source to quads (belonging to …\nConvert of triples in this source to quads (belonging to …\nConvert of quads in this source to triples (stripping the …\nConvert of quads in this source to triples (stripping the …\nCall f for all quads from this source.\nCall f for all quads from this source.\nCall f for all triples from this source.\nCall f for all triples from this source.\nCall f for some quad(s) (possibly zero) from this source, …\nCall f for some triple(s) (possibly zero) from this …\nUnwrap as the inner SinkError.\nUnwrap as the inner SourceError.\nThe result type of <code>TripleSource::to_quads</code>.\nThe result type of <code>QuadSource::to_triples</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe result type of <code>QuadSource::filter_quads</code>.\nThe result type of <code>TripleSource::filter_triples</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe result of <code>QuadSource::filter_map_quads</code> and …\n<code>Iterator</code> implementation for <code>FilterMapQuadSource</code>\nThe result of <code>TripleSource::filter_map_triples</code> and …\n<code>Iterator</code> implementation for <code>FilterMapTripleSource</code>\n<code>filter_map</code> every <code>Err(v)</code>\n<code>filter_map</code> every <code>Err(v)</code>\n<code>filter_map</code> every <code>Ok</code> value\n<code>filter_map</code> every <code>Ok</code> value\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe result of <code>QuadSource::map_quads</code>.\n<code>Iterator</code> implementation for the returned value of …\nThe result of <code>TripleSource::map_triples</code>.\n<code>Iterator</code> implementation for the returned value of …\n<code>filter_map</code> every <code>Err(v)</code>\n<code>filter_map</code> every <code>Err(v)</code>\n<code>filter_map</code> every <code>Ok</code> value\n<code>filter_map</code> every <code>Ok</code> value\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe result of a SELECT query\nThe type of bindings that SELECT queries will return.\nThe type of terms that SELECT queries will return.\nThe result of an ASK query\nThe error type that might be raised when parsing a query.\nA utility trait to allow <code>SparqlDataset::query</code> to accept …\nThe ouput type of <code>into_query</code>.\nPreprocessed query, ready for execution.\nThe type representing pre-processed queries.\nThe result of executing a SPARQL SELECT query\nA dataset that can be queried with SPARQL.\nThe type of errors that processing SPARQL queries may …\nThe result of executing a SPARQL query.\nThe result of a CONSTRUCT or DESCRIBE query\nThe type of triples that GRAPH and DESCRIBE queries will …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet this result as a <code>Bindings</code>.\nGet this result as a <code>Boolean</code>.\nConvert <code>self</code> to a <code>Query</code>.\nGet this result as a <code>Triples</code>.\nParse the given text into a <code>Query</code>.\nPrepare a query for multiple future executions.\nParse and immediately execute <code>query</code>.\nReturn the list of SELECTed variable names\nAn RDF blank node\nAn RDF blank node\nA type of <code>Term</code> that can be borrowed from this type (i.e. …\nA wrapper for any term type that ensures comparability\nThe error type produced when failing to copy a given term\nA type that can be built from any term.\nA <code>GraphName</code> is an optional <code>Term</code>, used to name a graph in …\nAn RDF IRI\nAn RDF IRI\nThis type is aliased from <code>sophia_iri</code> for convenience, as …\nAn RDF literal\nAn RDF literal\nAn RDF language-tagged string\nNo value.\nA straighforward implementation of <code>Term</code> as an enum.\nSome value of type <code>T</code>.\nA generalized RDF term.\nThe different kinds of terms that a <code>Term</code> can represent.\nAn RDF-star quoted triple\nAn RDF-star quoted triple\nA type that can be built from some terms.\nA SPARQL or Notation3 variable\nA SPARQL or Notation3 variable\nCopies this term into a <code>SimpleTerm</code>, borrowing as much as …\nTest that the given term is consistent in its …\nIter over all the atomic constituents of this term.\nI define the <code>BnodeId</code> wrapper type, which guarantees that …\nIf <code>kind</code> returns <code>TermKind::BlankNode</code>, return the locally …\nGet something implementing <code>Term</code> from a simple reference to …\nCompare two terms:\nIter over all the constituents of this term.\nIf <code>kind</code> returns <code>TermKind::Literal</code>, return the datatype IRI …\nCheck whether <code>self</code> and <code>other</code> represent the same RDF term.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCopy <code>term</code> into an instance of this type.\nBuild a <code>SimpleTerm</code> that borrows as much as possible from …\nBuild a <code>SimpleTerm</code> of kind <code>Triple</code> from any triple.\nDetermines if two <code>GraphName</code>s represent the same RDF term.\nCompute an implementation-independant hash of this RDF …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert this term in another type.\nIf <code>kind</code> returns <code>TermKind::Iri</code>, return this IRI. Otherwise …\nReturn true if this <code>Term</code> is an atomic term, i.e. an IRI, a …\nReturn true if this <code>Term</code> is a blank node, i.e. if <code>kind</code> …\nReturn true if this <code>Term</code> is an IRI, i.e. if <code>kind</code> retuns …\nReturn true if this <code>Term</code> is a literal, i.e. if <code>kind</code> retuns …\nReturn true if this <code>Term</code> is an RDF-star quoted triple, …\nReturn true if this <code>Term</code> is a variable, i.e. if <code>kind</code> …\nReturn the kind of RDF term that this <code>Term</code> represents.\nI define the <code>LanguageTag</code> wrapper type, which guarantees …\nIf <code>kind</code> returns <code>TermKind::Literal</code>, and if this literal is …\nIf <code>kind</code> returns <code>TermKind::Literal</code>, return the lexical form …\nI define generic traits and default implementations for …\nIter over all the atomic constituents of this term, …\nIter over all the constiutents of this term, consuming it.\nIf <code>kind</code> returns <code>TermKind::Triple</code>, return this triple, …\nIf <code>kind</code> returns <code>TermKind::Triple</code>, return this triple. …\nTry to copy <code>term</code> into an instance of this type.\nTry to convert this term into another type.\nI define the <code>VarName</code> wrapper type, which guarantees that …\nIf <code>kind</code> returns <code>TermKind::Variable</code>, return the name of …\nSee <code>BnodeId::new</code>.\nThis error is raised when trying to parse an invalid blank …\nConvert from <code>&amp;BnodeId&lt;T&gt;</code> to <code>BnodeId&lt;&amp;str&gt;</code>.\nGets a reference to the underlying &amp;str.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMap a <code>BnodeId&lt;T&gt;</code> to a <code>BnodeId&lt;U&gt;</code> by applying a function to …\nThis wrapper guarantees that the underlying <code>str</code> satisfies …\nConstruct a <code>BnodeId&lt;T&gt;</code> without checking that the inner …\nConstruct a <code>BnodeId&lt;&amp;&#39;static str&gt;</code> without checking that …\nReturns the wrapped value, consuming <code>self</code>.\nThis error is raised when trying to parse an invalid …\nThis wrapper guarantees that the underlying <code>str</code> is a valid …\nConvert reference to a <code>LanguageTag&lt;&amp;str&gt;</code>\nGets a reference to the underlying <code>str</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMap a <code>LanguageTag</code><code>&lt;T&gt;</code> to a <code>LanguageTag</code><code>&lt;U&gt;</code> by applying a …\nBuild a new <code>LanguageTag</code> from <code>tag</code>, returning an error if it …\nBuild a new <code>LanguageTag</code> from <code>tag</code>. It does not check that …\nConstruct a <code>LanguageTag&lt;&amp;&#39;static&gt;</code> without checking that …\nReturns the wrapped value, consuming <code>self</code>.\nA universal matcher: it matches any <code>Term</code> or <code>GraphName</code> …\nA <code>TermMatcher</code> that matches all literals with a given …\nGeneric trait for matching <code>GraphName</code>s.\nA <code>TermMatcher</code> that matches all literals with a given …\nResult type of <code>TermMatcher::matcher_ref</code> and …\nThe type of term that this GraphNameMatcher contains\nThe type of term that this TermMatcher contains\nGeneric trait for matching <code>Term</code>s.\nWrapper type returned by <code>TermMatcher::gn</code>\nBorrow the inner <code>IriRef</code>\nBorrow the inner <code>LanguageTag</code>\nReturn <code>None</code>, unless this matcher can only match a single …\nReturn <code>None</code>, unless this matcher can only match a single …\nReturn <code>None</code>, unless this matcher can only match a single …\nReturn <code>None</code>, unless this matcher can only match a single …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts this <code>TermMatcher</code> into a <code>GraphNameMatcher</code>\nConverts this <code>TermMatcher</code> into a <code>GraphNameMatcher</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn a <code>GraphNameMatcher</code> that is actually just a …\nReturn a <code>GraphNameMatcher</code> that is actually just a …\nReturn a <code>TermMatcher</code> that is actually just a reference to …\nReturn a <code>TermMatcher</code> that is actually just a reference to …\nCheck whether this matcher matches <code>t</code>.\nCheck whether this matcher matches <code>t</code>.\nConstruct a new <code>DatatypeMatcher</code> from an <code>IriRef</code>\nConstruct a new <code>LanguageTagMatcher</code> from a <code>LanguageTag</code>\nDestructs this <code>DatatypeMatcher</code>\nDestructs this <code>LanguageTagMatcher</code>\nThis error is raised when trying to parse an invalid …\nSee <code>VarName::new</code>.\nConvert from <code>&amp;VarName&lt;T&gt;</code> to <code>VarName&lt;&amp;str&gt;</code>.\nGets a reference to the underlying &amp;str.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMap a <code>VarName&lt;T&gt;</code> to a <code>VarName&lt;U&gt;</code> by applying a function to …\nThis wrapper guarantees that the underlying <code>str</code> satisfies …\nConstruct a <code>VarName&lt;T&gt;</code> without checking that the inner …\nConstruct a <code>VarName&lt;&amp;&#39;static str&gt;</code> without checking that …\nReturns the wrapped value, consuming <code>self</code>.\nType alias for terms borrowed from a triple.\nThe type of <code>Term</code> contained by this triple\nThis trait represents an abstract RDF triple, and provide …\nCheck whether <code>other</code> is term-wise equal (using <code>Term::eq</code>) to …\nCheck whether the triple (<code>s</code>, <code>p</code>, <code>o</code>) is term-wise equal …\nConvert this triple to a <code>Quad</code> in the default graph.\nConvert this triple to a <code>Quad</code> in the given named graph.\nChecks that the constituents terms of this triple match …\nThe object of this triple.\nThe predicate of this triple.\nThe subject of this triple.\nThe three components of this triple, as a triple of …\nConsume this triple, returning its object.\nConsume this triple, returning its predicate.\nConsume this triple, returning its subject.\nConsume this triple, returning all its components.")
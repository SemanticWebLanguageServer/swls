searchState.loadedDescShard("lsp_core", 0, "Core and common implementation for the semantic web …\nEvent triggers when a document is opened\n<code>ScheduleLabel</code> related to the Tasks schedule This schedule …\nMain language tower_lsp server implementation.\nHandle platform specific implementations for fetching and …\nDefines all common <code>Component</code>s and <code>Resource</code>s\nHosts all common features of the semantic language server. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDefines common language traits\nInitializes a <code>World</code>, including <code>Resources</code> and <code>Schedules</code>. …\nCommon utils\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>Resource</code> used to receive command queues. These command …\n<code>Resource</code> used to send command queues, allowing for async …\n<code>Component</code> indicating whether or not the document is dirty, …\n<code>Component</code> used to remember the linked documents.\n<code>Component</code> that allows for language specific implementation …\n<code>Component</code> that contains the parsed semantic element (i.e. …\nSimple wrapper for errors that derives <code>Component</code>\n<code>Component</code> containing the typical keywords for the current …\n<code>Component</code> containing the <code>lsp_types::Url</code> of the current …\n<code>Component</code> indicating whether or not the document is …\n<code>Component</code> used to wrap an incoming <code>lsp_types::Position</code>.\n<code>Component</code> containing the current source code as <code>ropey::Rope</code>\n<code>Component</code> containing the current source code as <code>String</code>\n<code>Resource</code> used to set and get all super and subtypes …\nmaps terms to all known correct types.\nSimple wrapper structure that derives <code>Component</code>\n<code>Component</code> indicating that the current document is …\n<code>ScheduleLabel</code> related to the Completion schedule\n<code>ScheduleLabel</code> related to the PrepareRename schedule\n<code>Component</code> indicating that the current document is …\n<code>ScheduleLabel</code> related to the Format schedule, this is …\n<code>Component</code> indicating that the current document is …\n<code>ScheduleLabel</code> related to the Parse schedule\n<code>Component</code> indicating that the current document is …\n<code>ScheduleLabel</code> related to the Inlay schedule\n<code>ScheduleLabel</code> related to the Parse schedule\nParse schedule barrier, after this system, prefixes should …\nParse schedule barrier, after this system, triples should …\n<code>ScheduleLabel</code> related to the PrepareRename schedule\n<code>Component</code> indicating that the current document is …\n<code>ScheduleLabel</code> related to the Rename schedule\n<code>Component</code> indicating that the current document is …\n<code>ScheduleLabel</code> related to the OnSave schedule\n<code>Component</code> indicating that the current document is …\n<code>Resource</code> mapping a [‘SemanticTokenType’] to their used …\nType of Element inside a ParentingSystem\nType of tokens after tokenization\n[ ]\n@base\n_:…\n)\n(\n:\n,\n<code>Resource</code> used to receive command queues. These command …\n<code>Resource</code> used to send command queues, allowing for async …\n<code>Component</code> indicating that the current document is …\nEvent triggers when a document is opened\n}\n{\n^^\n<code>Component</code> indicating whether or not the document is dirty, …\n<code>Component</code> used to remember the linked documents.\n“…”\n“”“…”“”\n<code>Component</code> that allows for language specific implementation …\n<code>Component</code> that contains the parsed semantic element (i.e. …\nType of Element inside a ParentingSystem\nSimple wrapper for errors that derives <code>Component</code>\nfalse\n<code>Component</code> indicating that the current document is …\n<code>Component</code> indicating that the current document is …\n<code>Component</code> indicating that the current document is …\n&lt;…&gt;\n<code>Component</code> indicating that the current document is …\n<code>Component</code> containing the typical keywords for the current …\n<code>Component</code> containing the <code>lsp_types::Url</code> of the current …\n@…\nnull\n<code>Component</code> indicating whether or not the document is …\n..:\n<code>Component</code> used to wrap an incoming <code>lsp_types::Position</code>.\na\n;\nOne defined prefix, maps prefix to url\n@prefix\n<code>Component</code> that containing defined prefixes and base URL.\n<code>Component</code> indicating that the current document is …\n<code>Component</code> indicating that the current document is …\n<code>Component</code> containing the current source code as <code>ropey::Rope</code>\n<code>Resource</code> mapping a [‘SemanticTokenType’] to their used …\n‘…’\n‘’‘…’‘’\n<code>Component</code> containing the current source code as <code>String</code>\nSparql aggregate\nsparql base\nSparql call\nSparql expression\nSparql keyword\nsparql prefix\n]\n[\n.\nAll string types\nType of tokens after tokenization\n<code>Component</code> used to indicate the currently targeted <code>Token</code> …\n<code>Component</code> that contains the parsed tokens.\n<code>Component</code> used to indicate the currently targeted […\n<code>Component</code> used to indicate the term type of currently …\n<code>Component</code> containing all derived Triples from the …\ntrue\n<code>Resource</code> used to set and get all super and subtypes …\nmaps terms to all known correct types.\nSparql variable\nSimple wrapper structure that derives <code>Component</code>\nHosts all common features of the semantic language server. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInitializes a <code>World</code>, including <code>Resources</code> and <code>Schedules</code>. …\n<code>Component</code> indicating that the current document is …\n<code>ScheduleLabel</code> related to the Completion schedule\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>ScheduleLabel</code> related to the PrepareRename schedule\n<code>Component</code> indicating that the current document is …\n<code>ScheduleLabel</code> related to the Completion schedule\n<code>ScheduleLabel</code> related to the PrepareRename schedule\n<code>Component</code> indicating that the current document is …\n<code>ScheduleLabel</code> related to the Format schedule, this is …\n<code>Component</code> indicating that the current document is …\n<code>ScheduleLabel</code> related to the Parse schedule\n<code>Component</code> indicating that the current document is …\n<code>ScheduleLabel</code> related to the Inlay schedule\n<code>ScheduleLabel</code> related to the Parse schedule\nParse schedule barrier, after this system, prefixes should …\nParse schedule barrier, after this system, triples should …\n<code>ScheduleLabel</code> related to the PrepareRename schedule\n<code>Component</code> indicating that the current document is …\n<code>ScheduleLabel</code> related to the Rename schedule\n<code>Component</code> indicating that the current document is …\n<code>ScheduleLabel</code> related to the OnSave schedule\n<code>Component</code> indicating that the current document is …\n<code>Resource</code> mapping a [‘SemanticTokenType’] to their used …\n<code>Component</code> indicating that the current document is …\n<code>ScheduleLabel</code> related to the Format schedule, this is …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>Component</code> indicating that the current document is …\n<code>ScheduleLabel</code> related to the Parse schedule\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>Component</code> indicating that the current document is …\n<code>ScheduleLabel</code> related to the Inlay schedule\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>ScheduleLabel</code> related to the Parse schedule\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nParse schedule barrier, after this system, prefixes should …\nParse schedule barrier, after this system, triples should …\n<code>ScheduleLabel</code> related to the PrepareRename schedule\n<code>Component</code> indicating that the current document is …\n<code>ScheduleLabel</code> related to the Rename schedule\n<code>Component</code> indicating that the current document is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ScheduleLabel</code> related to the OnSave schedule\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>Component</code> indicating that the current document is …\n<code>Resource</code> mapping a [‘SemanticTokenType’] to their used …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFirst of al, fetch the lov dataset information at url …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSystem evaluates linked shapes\nSystem checks what entities should retrigger a shape …\nOne defined prefix, maps prefix to url\n<code>Component</code> that containing defined prefixes and base URL.\nFirst of al, fetch the lov dataset information at url …\nSystem evaluates linked shapes\nSystem checks what entities should retrigger a shape …\nOne defined prefix, maps prefix to url\n<code>Component</code> that containing defined prefixes and base URL.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCommonly used RDF prefixes\nThe standard <code>rdf:</code> namespace.\nGenerated term.\nGenerated term.\nGenerated term.\nPrefix used in this namespace.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nPrefix used in this namespace.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nPrefix used in this namespace.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nPrefix used in this namespace.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nGenerated term.\nPrefix used in this namespace.\nGenerated term.\nGenerated term.\nGenerated term.\n[ ]\n@base\n_:…\n)\n(\n:\n,\n}\n{\n^^\n“…”\n“”“…”“”\nfalse\n&lt;…&gt;\n@…\nnull\n..:\na\n;\n@prefix\n‘…’\n‘’‘…’‘’\nSparql aggregate\nsparql base\nSparql call\nSparql expression\nSparql keyword\nsparql prefix\n]\n[\n.\nAll string types\n<code>Component</code> used to indicate the currently targeted <code>Token</code> …\n<code>Component</code> that contains the parsed tokens.\ntrue\nSparql variable\n<code>Component</code> used to indicate the currently targeted […\n<code>Component</code> used to indicate the term type of currently …\n<code>Component</code> containing all derived Triples from the …")
searchState.loadedDescShard("shacl_validation", 0, "shacl-validation\nThe SHACL processor implementation, used for validating a …\nUtilities for handling local graphs (serialized), SPARQL …\nThe result of the validation process.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIf s is a shape in a shapes graph SG and s has value t for …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIf s is a shape in a shapes graph SG and s has value t for …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIf s is a shape in a shapes graph SG and s has value t for …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis struct can be used to define configuration of SHACL\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe Endpoint Graph Validation algorithm.\nThe In-Memory Graph Validation algorithm.\nWe use a Rust native engine in an imperative manner …\nThe basic operations of the SHACL Processor.\nBackend used for the validation.\nWe use a  SPARQL-based engine, which is declarative\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns an In-Memory Graph validation SHACL processor.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExecutes the Validation of the provided Graph, in any of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nValidate RDF data using SHACL\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSets the prefixmap for nodes\nSets the same prefixmap for nodes and shapes\nSets the prefixmap for shapes\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")
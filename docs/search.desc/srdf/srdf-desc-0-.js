searchState.loadedDescShard("srdf", 0, "This crate contains a <em>Simple</em> RDF wrapper which can be …\nAuxiliary macro that is invoked from <code>rdf_parser</code> which …\nCreates an integer literal\nDeclares a named RDF parser which can be reused.\nImplementation of the SRDF traits using OxRDF.\nImplementation of [<code>SRDF</code>] traits based on SPARQL endpoints\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a numeric literal from a decimal\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConcrete representation of RDF objects which can be IRIs, …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRepresents one query solution\nRepresent a list of query solutions\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConcrete representation of RDF nodes, which are equivalent …\nThis struct can be used to define configuration of RDF …\nIf true, the base IRI will be automatically set to the …\nDefault base to resolve relative IRIs, if it is <code>None</code> …\nEndpoints to query RDF data. Each endpoint description is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPosible RDF formats\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSHACL paths follow the SHACL property paths spec which are …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis trait contains functions to handle Simple RDF graphs, …\nGet the neighbours of a term This code creates an …\nget outgoing arcs from a <code>node</code> taking into account only a …\nBlannk nodes\nRDF errors\nRDF predicates\nRDF Literals\nTypes that implement this trait contain basic comparisons …\nRDF subjects\nRDF terms\nResolves a a prefix and a local name and obtains the …\nReturns the RDF subject as a Blank Node if it is a blank …\nReturns the RDF subject as an IRI if it is an IRI, None if …\nReturns <code>true</code> if the subject is a Blank Node\nReturns <code>true</code> if the subject is an IRI\nTypes that implement this trait can build RDF data\nAdds an optional IRI as base\nAdds a prefix declaration to the current RDF graph\nAdds a prefix map declaration to the current RDF graph\nAdds an RDF triple to the current RDF graph\nAdds an <code>rdf:type</code> declaration to the current RDF graph\nReturns an empty RDF graph\nRemoves an RDf triple to the current RDF graph\nSerialize the current graph to a Write implementation\nEmits a warning and continues processing\nReader mode when parsing RDF data files\nStops when there is an error\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nImplementation of <code>RDFNodeParse::by_ref</code>\nContains the error value\nRepresents RDF graphs that contain a focus node\nContains the success value\nThe type which is returned if the parser is successful.\nThe type which is returned if the parser is successful.\nBy implementing the <code>RDFNodeParse</code> trait a type says that it …\nThe following code is an attempt to define parser …\nImplements a concrete RDF parser\nParses <code>self</code> followed by <code>p</code>. Succeeds if both parsers …\nParses <code>self</code> followed by <code>p</code>. Succeeds if both parsers …\nParses with <code>self</code> and applies <code>f</code> on the result if <code>self</code> …\nParses with <code>self</code> and applies <code>f</code> on the result if <code>self</code> …\nApplies a function and returns its result\nApplies a function over the RDF graph and returns the …\nParses a node as a bool\nCombines the results of parsers that return vectors of …\nApplies a function and returns its result\nFails with a given massage\nUses <code>f</code> to map over the output of <code>self</code>. If <code>f</code> returns an …\nUses <code>f</code> to map over the output of <code>self</code>. If <code>f</code> returns an …\nSets the focus node and returns ()\nSets the focus node and returns ()\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a parser that returns the focus node\nGet the focus node if it exists\nGet the current focus as a Subject\nGet the current focus as a Subject\nGet the current focus as a Term\nGet the current focus as a Term\nReturns the node that is an instance of the expected IRI …\nReturns all nodes that are instances of the expected IRI …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the focus node is an IRI\nSucceeds if current term is the expected IRI\nChecks if the focus node is an IRI\nApplies a function <code>f</code> on the result of a parser\nUses <code>f</code> to map over the parsed value.\nUses <code>f</code> to map over the parsed value.\nCreates a parser that returns the value associated with …\nNot parser succeeds if the <code>parser</code> fails and viceversa …\nSucceeds with a given value\nEquivalent to [<code>parser1.or(parser2)</code>].\nReturns a parser which attempts to parse using <code>self</code>. If …\nReturns a parser which attempts to parse using <code>self</code>. If …\nEntry point to the parser. It moves the focus node of <code>rdf</code> …\nEntry point to the parser. It moves the focus node of <code>rdf</code> …\nApply a parser to an RDF node associated with the value of …\nParses the current focus node without modifying the state\nApplies a parser over a list of nodes and returns the list …\nParses the value of <code>property</code> as an RDF list\nParses a node as an RDF List applying each element of the …\nCreated a parser that returns the boolean associated with …\nReturns the integer value of <code>property</code> for the focus node\nReturns the integer values of <code>property</code> for the focus node\nReturns the IRI value of <code>property</code> for the focus node\nParses the RDF list linked from the value of property <code>prop</code> …\nReturns the string value of <code>property</code> for the focus node\nCreates a parser that returns the value associated with …\nCreates a parser that returns the value associated with …\nReturns the values of <code>property</code> for the focus node\nReturn the integer values of <code>property</code> for the focus node\nReturn the IRI values of <code>property</code> for the focus node\nReturns the values of <code>property</code> for the focus node\nParses the current focus node as an RDF List\nCreates a parser that checks if the current node satisfies …\nCreates a parser that sets the focus node and returns <code>()</code>\nSet the value of the focus node\nReturns all nodes that are instances of the expected IRI …\nCreates a parser that returns the current focus node as a …\nEquivalent to <code>p.then(f)</code>.\nParses using <code>self</code> and then passes the value to <code>f</code> which …\nParses using <code>self</code> and then passes the value to <code>f</code> which …\nEquivalent to <code>p.then_mut(f)</code>.\nParses using <code>self</code> and then passes a reference to the …\nParses using <code>self</code> and then passes a reference to the …\nEquivalent to <code>p.then_ref(f)</code>.\nParses using <code>self</code> and then passes a reference to the value …\nParses using <code>self</code> and then passes a reference to the value …\nEquivalent to [<code>parser1.with(parser2)</code>]\nDiscards the value of the current parser and returns the …\nDiscards the value of the current parser and returns the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA <code>Client</code> to make Requests with.\nImplements SRDF interface as a SPARQL endpoint\nCreates a <code>ClientBuilder</code> to configure a <code>Client</code>.\nConvenience method to make a <code>DELETE</code> request to a URL.\nExecutes a <code>Request</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvenience method to make a <code>GET</code> request to a URL.\nConvenience method to make a <code>HEAD</code> request to a URL.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new <code>Client</code>.\nConvenience method to make a <code>PATCH</code> request to a URL.\nConvenience method to make a <code>POST</code> request to a URL.\nConvenience method to make a <code>PUT</code> request to a URL.\nStart building a <code>Request</code> with the <code>Method</code> and <code>Url</code>.\nConcrete representation of RDF subjects, which can be IRIs …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")
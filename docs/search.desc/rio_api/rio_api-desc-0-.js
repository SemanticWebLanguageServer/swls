searchState.loadedDescShard("rio_api", 0, "This crate provides basic interfaces and data structures …\nInterfaces for RDF formatters.\nData structures for RDF 1.1 and RDF-star concepts like …\nInterfaces for RDF parsers.\nA formatter for <code>Quad</code>.\nA formatter for <code>Triple</code>.\nWrites a triple\nWrites a quad\nAn RDF blank node.\nA generalized RDF triple in a RDF dataset.\nA generalized RDF term.\nA restriction of Term that can be used in the graph name …\nA language-tagged string\nAn RDF literal.\nAn RDF IRI.\nA RDF triple in a RDF dataset.\nA simple literal without datatype or language form.\nAn error raised when generalized RDF cannot be converted …\nA restriction of Term that can be used as the subject of …\nAn RDF term.\nA RDF triple.\nRio does support RDF-star, which allows triples to be the …\nRio does support RDF-star, which allows triples to be …\nA literal with an explicit datatype\nA SPARQL variable.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe blank node identifier.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe IRI itself.\nThe name of  the variable itself.\nThe datatype IRI.\nThe language tag.\nThe lexical form.\nThe lexical form.\nThe lexical form.\nA parser returning generalized <code>Quad</code>.\nCreated with the method <code>into_iter</code>.\nError trait that allows to get the textual position of the …\nA parser returning <code>Quad</code>.\nCreated with the method <code>into_iter</code>.\nA parser returning <code>Triple</code>.\nCreated with the method <code>into_iter</code>.\nThe byte number where the error occurred starting from 0\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the parser into a <code>Result&lt;T, E&gt;</code> iterator.\nConverts the parser into a <code>Result&lt;T, E&gt;</code> iterator.\nConverts the parser into a <code>Result&lt;T, E&gt;</code> iterator.\nConverts the parser into a <code>Result&lt;T, E&gt;</code> iterator.\nReturns <code>true</code> if the file has been completely consumed by …\nReturns <code>true</code> if the file has been completely consumed by …\nReturns <code>true</code> if the file has been completely consumed by …\nThe line number where the error occurred starting from 0\nCreates a new position where <code>line_number</code> and <code>byte_number</code> …\nParses the complete file and calls <code>on_triple</code> each time a …\nParses the complete file and calls <code>on_quad</code> each time a new …\nParses the complete file and calls <code>on_quad</code> each time a new …\nParses the complete file and calls <code>on_quad</code> each time a new …\nParses a small chunk of the file and calls <code>on_triple</code> each …\nParses a small chunk of the file and calls <code>on_quad</code> each …\nParses a small chunk of the file and calls <code>on_quad</code> each …\nReturns the position of the error in the text, if known.")
searchState.loadedDescShard("resiter", 0, "resiter\nExtend any Iterator with a <code>process</code> method, equivalent to a …\nPrelude\nExtension trait for <code>Iterator&lt;Item = Result&lt;O, E&gt;&gt;</code> to …\nMap errors selectively, possibly converting them to Oks\nMap oks selectively, possibly converting them to errors\n<code>filter_map</code> every <code>Err(v)</code>\n<code>filter_map</code> every <code>Err(v)</code>\n<code>filter_map</code> every <code>Ok</code> value\n<code>filter_map</code> every <code>Ok</code> value\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtend any Iterator with a <code>process</code> method, equivalent to a …\nExtension trait for <code>Iterator&lt;Item = Result&lt;T, E&gt;&gt;</code> to get …\nGet all errors from this <code>Iterator</code>\nExtension trait for <code>Iterator&lt;Item = Result&lt;O, E&gt;&gt;</code> to …\nFilter <code>Err</code> values while keeping <code>Ok</code>\n<code>filter_map</code> every <code>Err(v)</code>\n<code>filter_map</code> every <code>Err(v)</code>\n<code>filter_map</code> every <code>Ok</code> value\n<code>filter_map</code> every <code>Ok</code> value\nFilter <code>Ok</code> items while keeping <code>Err</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtension trait for <code>Iterator&lt;Item = Result&lt;O, E&gt;&gt;</code> to …\n<code>filter_map</code> every <code>Err(v)</code>\n<code>filter_map</code> every <code>Err(v)</code>\n<code>filter_map</code> every <code>Ok</code> value\n<code>filter_map</code> every <code>Ok</code> value\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtension trait for <code>Iterator&lt;Item = Result&lt;O, E&gt;&gt;</code> to …\n<code>filter_map</code> every <code>Err(v)</code>\n<code>filter_map</code> every <code>Err(v)</code>\n<code>filter_map</code> every <code>Ok</code> value\n<code>filter_map</code> every <code>Ok</code> value\nflat_map every <code>Err</code> value and leave all <code>Ok</code> as is\nflat_map every <code>Ok</code> value and leave all <code>Err</code> as is\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtension trait for <code>Iterator&lt;Item = Result&lt;O, E&gt;&gt;</code> to …\n<code>filter_map</code> every <code>Err(v)</code>\n<code>filter_map</code> every <code>Err(v)</code>\n<code>filter_map</code> every <code>Ok</code> value\n<code>filter_map</code> every <code>Ok</code> value\nflatten <code>Err</code> values while leaving <code>Ok</code>-values as is.\nflatten <code>Ok</code> values while leaving <code>Err</code>-values as is.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtension trait for <code>Iterator&lt;Item = Result&lt;O, E&gt;&gt;</code> to …\n<code>filter_map</code> every <code>Err(v)</code>\n<code>filter_map</code> every <code>Err(v)</code>\n<code>filter_map</code> every <code>Ok</code> value\n<code>filter_map</code> every <code>Ok</code> value\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMap all <code>Err</code> items while leaving <code>Ok</code> as is\nMap all <code>Ok</code> items while leaving <code>Err</code> as is\nExtension trait for doing …\nExtension trait for doing <code>Result&lt;Option&lt;T&gt;, E&gt;</code>  -&gt;  …\n<code>filter_map</code> every <code>Err(v)</code>\n<code>filter_map</code> every <code>Ok</code> value\nReturns the argument unchanged.\nApply Option::or_else on option values in wrapped in …\nCalls <code>U::from(self)</code>.\nMap option inside an ok result, fail with the else-value …\nExtension trait for <code>Iterator&lt;Item = Result&lt;T, E&gt;&gt;</code> to get …\nExtend any Iterator with a <code>process</code> method, equivalent to a …\nIterate over every <code>Ok</code> while ignoring every <code>Err</code>\nExtension trait for <code>Iterator&lt;Item = Result&lt;T, E&gt;&gt;</code> to do …\n<code>filter_map</code> every <code>Err(v)</code>\n<code>filter_map</code> every <code>Ok</code> value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nApply a sideffect on each <code>Err</code>\nExtension trait for <code>Iterator&lt;Item = Result&lt;T, E&gt;&gt;</code> to do …\n<code>filter_map</code> every <code>Err(v)</code>\n<code>filter_map</code> every <code>Ok</code> value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPerform a side effect on each Ok value\nExtension for <code>Iterator&lt;Item = Result&lt;O, E&gt;&gt;</code> to filter the …\n<code>filter_map</code> every <code>Err(v)</code>\n<code>filter_map</code> every <code>Err(v)</code>\n<code>filter_map</code> every <code>Ok</code> value\n<code>filter_map</code> every <code>Ok</code> value\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFilters every <code>Err</code>-value with a function that can return an …\nFilters every <code>Ok</code>-value with a function that can return an …\nExtension trait for <code>Iterator&lt;Item = Result&lt;O, E&gt;&gt;</code> to …\n<code>filter_map</code> every <code>Err(v)</code>\n<code>filter_map</code> every <code>Err(v)</code>\n<code>filter_map</code> every <code>Ok</code> value\n<code>filter_map</code> every <code>Ok</code> value\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEquivalent to Iterator::filter_map on all <code>Err</code> values. The …\nEquivalent to Iterator::filter_map on all <code>Ok</code> values. The …\nExtension trait for <code>Iterator&lt;Item = Result&lt;O, E&gt;&gt;</code> to …\n<code>filter_map</code> every <code>Err(v)</code>\n<code>filter_map</code> every <code>Err(v)</code>\n<code>filter_map</code> every <code>Ok</code> value\n<code>filter_map</code> every <code>Ok</code> value\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEquivalent to Iterator::map on all <code>Err</code> values. The map …\nEquivalent to Iterator::map on all <code>Ok</code> values. The map …\nExtension trait for <code>Iterator&lt;Item = Result&lt;T, E&gt;&gt;</code> to …\n<code>filter_map</code> every <code>Err(v)</code>\n<code>filter_map</code> every <code>Ok</code> value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nProcess all errors with a lambda\nUnwraps all results\nExtension trait for <code>Iterator&lt;Item = Result&lt;O, E&gt;&gt;</code> to iter …\nPerform an on each <code>Ok</code> value. Stop on first <code>Err</code>")
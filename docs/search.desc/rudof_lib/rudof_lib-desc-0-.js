searchState.loadedDescShard("rudof_lib", 0, "<code>rudof_lib</code> presents the public API to interact with <code>rudof</code> …\nShow all nodes\nDCTAP available formats\nContains the error value\nEmits a warning and continues processing\nWe use a Rust native engine in an imperative manner …\nShow only the neighbours of a node\nContains the success value\nContains declarations of prefix maps which are used in …\nRepresents one query solution\nRepresent a list of query solutions\nPosible RDF formats\nGeneric abstraction that represents RDF Data which can be  …\nReader mode when parsing RDF data files\nContains a map of the results obtained after applying ShEx …\nThis represents the public API to interact with <code>rudof</code>\nImplements SRDF interface as a SPARQL endpoint\nContains possible ShEx formats\nStruct that can be used to pretty print ShEx schemas\nSHACL Formats supported. Mostly RDF formats In the future, …\nBackend used for the validation.\nFormat of Shapemap files\nStruct that can be used to pretty print Shapemaps\nWe use a  SPARQL-based engine, which is declarative\nStops when there is an error\nRepresents the current status of validation\nThis struct can be used to customize the behavour of ShEx …\nAdds an endpoint to the current RDF data\nAdds a new endpoint to the list of endpoints\nBasic prefixmap with common definitions\nChecks if the Store has been initialized\nCleans the in-memory graph\nCleans the in-memory graph\nConverts the current DCTAP to a ShExSchema Stores the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an RdfData from an endpoint\nCreates an RdfData from an in-memory RDF Graph\nObtain a Schema from an IRI\nObtain a <code>ValidatorConfig</code> from a path file in YAML format\nGet the current DCTAP\nGet current RDF Data\nGet the current SHACL\nGet the shapes graph schema from the current RDF data\nGet the current shapemap\nGet the current ShEx Schema\nGet the in-memory graph\nReturns the list of import declared in the Schema\nInserts an alias association to an IRI\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn an iterator over the key-value pairs of the (“…\nProper prefix map associations of an alias <code>String</code> to an …\nMaximum numbers of validation steps\nMerge the in-memory graph with the graph read from a reader\nCreates an empty (“map\nReturns the RDF data prefixmap\nParse a ShapeMap that uses ShapeMap compact syntax\nGets the PrefixMap from the in-memory graph\nQualifies an IRI against a prefix map\nQualifies an IRI against a prefix map returning the length …\nQualify an IRI against a prefix map and obtains the local …\nQualifies an IRI against a prefix map\nConfiguration of RDF data readers\nParses an RDF graph from a reader and merges it with the …\nReads a <code>DCTAP</code> and replaces the current one\nReads a <code>DCTAP</code> and replaces the current one\nReads a SHACL schema from a reader\nRead a shapemap\nReads a <code>ShExSchema</code> and replaces the current one It also …\nResets all current values\nResets the current RDF Data\nResets the current DCTAP\nResets the current SHACL shapes graph\nResets the current validator This operation removes the …\nResets the current ShEx validation results The action is …\nResolves a string against a prefix map Example: Given a …\nResolves an IriRef against a prefix map\nResolves a prefixed alias and a local name in a prefix map …\nSerialize the current ShapeMap\nSerialize the current ShEx Schema\nConfiguration of Shapemaps\nAdd a pair of node selector and shape selector to the …\nConfiguration of ShEx schemas\nGenerate a UML Class-like representation of a ShEx schema …\nObtains the current <code>shex_schema</code> after resolving import …\nReturns the shapes prefixmap\nvalidate a node against a shape label\nValidate RDF data using SHACL\nValidate RDF data using ShEx It uses a ShEx validator …\nDefault Wikidata prefixmap This source of this list is …\nSets the prefixmap for nodes\nSets the same prefixmap for nodes and shapes\nChange color of localname when qualifying a IRI\nChange (“color when qualifying a IRI\nChange color of semicolon when qualifying a IRI\nSets the prefixmap for shapes\nChanges the formatter to avoid showing colors\n<code>rudof_config</code> describes the configuration of Rudof\nReturns the argument unchanged.\nObtain a DCTapConfig from a path file in YAML\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")
searchState.loadedDescShard("rbe", 0, "Regular Bag Expressions (rbe)\nA set whose elements can be repeated. The set tracks how …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA wrapper around a usize to represent a component in the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn adaptor of a <code>Vec&lt;T&gt;</code> that generates an iterator that …\nReturn an iterator that generates variants of the vector …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA <code>MatchCond</code> represents a matching condition It can be a …\nRepresents a matching condition\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents a max cardinality which can be a fixed integer …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRepresents a min cardinality which must be a 0 or positive …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIndicates a map of values <code>V</code> that depend on some references …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nImplementation of Regular Bag Expressions\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalculates the derivative of a <code>rbe</code> for a <code>symbol</code> with <code>value</code> …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRepresents a regular bag expression error.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis is a placeholder that we can use to define generic …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")
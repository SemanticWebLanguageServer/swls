searchState.loadedDescShard("serde_wasm_bindgen", 0, "This is a native integration of Serde with wasm-bindgen. …\nA newtype that allows using any <code>JsValue</code> as a …\nA newtype that represents Serde errors as JavaScript …\nA <code>serde::Serializer</code> that converts supported Rust values …\nSerde expects <code>visit_byte_buf</code> to be called only in response …\nWe can’t take references to JS memory, so forwards to an …\nConverts a JavaScript string to a Rust char.\nHere we try to be compatible with <code>serde-json</code>, which means …\nIgnores any value without calling to the JS side even to …\nSupported inputs:\nSimply calls <code>visit_newtype_struct</code>.\nSupported inputs:\nSupported inputs:\nForwards to <code>Self::deserialize_seq</code>.\nForwards to <code>Self::deserialize_tuple</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts <code>JsValue</code> into a Rust type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a JSON compatible serializer. This uses null …\nCreates a JavaScript <code>Error</code> with a given message.\nCreates a new default <code>Serializer</code>.\nSet to <code>true</code> to serialize bytes into plain JavaScript …\nSet to <code>true</code> to serialize 64-bit numbers to JavaScript …\nSerialises Rust maps into JS <code>Map</code> or plain JS objects, …\nSet to <code>true</code> to serialize maps into plain JavaScript …\nSet to <code>true</code> to serialize <code>()</code>, unit structs and <code>Option::None</code> …\nSerialises any Rust iterable into a JS Array.\nSerialises Rust typed structs into plain JS objects.\nFor compatibility with serde-json, serialises unit …\nConverts a Rust value into a <code>JsValue</code>.")
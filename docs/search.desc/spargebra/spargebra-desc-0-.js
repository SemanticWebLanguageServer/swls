searchState.loadedDescShard("spargebra", 0, "Spargebra\nASK.\nclear.\nCONSTRUCT.\ncreate.\ndelete data.\ndelete insert.\nDESCRIBE.\ndrop.\nThe graph update operations.\ninsert data.\nload.\nA parsed SPARQL query.\nSELECT.\nError returned during SPARQL parsing.\nA parsed SPARQL update.\nSPARQL 1.1 Query Algebra representation.\nThe update base IRI.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe update operations.\nParses a SPARQL query with an optional base IRI to resolve …\nParses a SPARQL update with an optional base IRI to …\nData structures for RDF 1.1 Concepts like IRI, literal or …\nFormats using the SPARQL S-Expression syntax.\nFormats using the SPARQL S-Expression syntax.\nThe query base IRI.\nThe query base IRI.\nThe query base IRI.\nThe query base IRI.\nThe query dataset specification.\nThe query dataset specification.\nThe query dataset specification.\nThe query dataset specification.\nThe query selection graph pattern.\nThe query selection graph pattern.\nThe query selection graph pattern.\nThe query selection graph pattern.\nThe query construction template.\nop:numeric-add and other XSD additions.\nA set function used in aggregates (c.f. <code>GraphPattern::Group</code>…\nAn aggregate function name.\nLogical-and.\nAscending order\nAvg.\nA basic graph pattern.\nBOUND.\nCOALESCE.\nCount with *.\nCount with *.\nDescending order\nDistinct.\nop:numeric-divide and other XSD divides.\nRDFterm-equal and all the XSD equalities.\nEXISTS.\nAn expression.\nExtend.\nFilter.\nA function name.\nA regular function call.\nA SPARQL query graph pattern.\nA target RDF graph for update operations.\nop:numeric-greater-than and other XSD greater than …\nGroup.\nGroupConcat.\nIF.\nIN\nJoin.\nLateral join i.e. evaluate right for all result row of left\nLeftJoin.\nop:numeric-less-than and other XSD greater than operators.\nMax.\nMin.\nMinus.\nop:numeric-multiply and other XSD multiplications.\nfn:not.\nLogical-or.\nOrderBy.\nAn ordering comparator used by <code>GraphPattern::OrderBy</code>.\nA property path pattern.\nProject.\nA property path expression.\nA SPARQL query dataset specification.\nReduced.\nsameTerm.\nSample.\nService.\nSlice.\nop:numeric-subtract and other XSD subtractions.\nSum.\nop:numeric-unary-minus and other XSD unary minus.\nop:numeric-unary-plus and other XSD unary plus.\nUnion.\nA table used to provide inline values\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>callback</code> on each in-scope variable occurrence.\nAn owned RDF blank node.\nA possible graph name.\nThe union of IRIs, default graph name and variables.\nA RDF triple in an RDF dataset without blank nodes.\nA triple pattern in a specific graph without blank nodes.\nThe union of IRIs and triples.\nThe union of IRIs, literals and triples.\nThe union of terms and variables without blank nodes.\nA RDF triple without blank nodes.\nA triple pattern without blank nodes.\nAn owned RDF literal.\nAn owned RDF IRI.\nThe union of IRIs and variables.\nA RDF triple in an RDF dataset.\nA triple pattern in a specific graph\nThe owned union of IRIs, blank nodes  and triples (if the …\nAn owned RDF term\nThe union of terms and variables.\nAn owned RDF triple.\nA triple pattern\nA SPARQL query owned variable.\nReturns the underlying ID of this blank node.\nThe literal datatype.\nBuilds a new RDF blank node with a unique id.\nExtract components from this literal (value, datatype and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParses a blank node from its NTriples serialization\nParses a literal from its NTriples serialization\nParses a named node from its NTriples and Turtle …\nParses a term from its NTriples serialization\nParses a triple from its NTriples serialization\nParses a variable from its SPARQL serialization\nBuilds an RDF triple from <code>Term</code>s.\nEncodes that this triple is in an RDF dataset.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the underlying ID of this blank node.\nChecks if this literal could be seen as an RDF 1.0 plain …\nThe literal language tag if it is a language-tagged string.\nCreates a blank node from a unique identifier.\nBuilds and validate an RDF IRI.\nBuilds an RDF triple.\nCreates a variable name from a unique identifier.\nCreates a blank node from a unique numerical id.\nBuilds an RDF language-tagged string.\nBuilds an RDF language-tagged string.\nBuilds an RDF simple literal.\nBuilds an RDF literal with a datatype.\nCreates a blank node from a unique identifier without …\nBuilds an RDF IRI from a string.\nCreates a variable name from a unique identifier without …\nThe object of this triple.\nThe predicate of this triple.\nThe subject of this triple.\nThe literal lexical form.")
searchState.loadedDescShard("oxrdf", 0, "OxRDF\nAn owned RDF blank node.\nAn error raised during <code>BlankNode</code> IDs validation.\nA borrowed RDF blank node.\nAn owned graph name\nA borrowed graph name\nAn error raised during <code>Iri</code> or <code>IriRef</code> validation.\nAn error raised during <code>LanguageTag</code> validation.\nAn owned RDF literal.\nA borrowed RDF literal.\nAn owned RDF IRI.\nA borrowed RDF IRI.\nThe owned union of IRIs and blank nodes.\nThe borrowed union of IRIs and blank nodes.\nAn owned triple in an RDF dataset.\nA borrowed triple in an RDF dataset.\nThe owned union of IRIs, blank nodes  and triples (if the …\nThe borrowed union of IRIs, blank nodes and triples (if …\nAn owned RDF term\nAn error raised during term serialization parsing using …\nA borrowed RDF term\nAn owned RDF triple.\nA borrowed RDF triple.\nAn error return by some <code>TryFrom&lt;Term&gt;</code>  implementations.\nA SPARQL query owned variable.\nAn error raised during <code>Variable</code> name validation.\nA SPARQL query borrowed variable.\nReturns the underlying ID of this blank node.\nReturns the underlying ID of this blank node.\nIn-memory implementation of RDF datasets.\nThe literal datatype.\nThe literal datatype.\nBuilds a new RDF blank node with a unique id.\nExtract components from this literal (value, datatype and …\nExtract components from this literal\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParses a blank node from its NTriples serialization\nParses a literal from its NTriples serialization\nParses a named node from its NTriples and Turtle …\nParses a term from its NTriples serialization\nParses a triple from its NTriples serialization\nParses a triple from its NQuads serialization\nParses a variable from its SPARQL serialization\nBuilds an RDF triple from <code>Term</code>s.\nIn-memory implementation of RDF graphs.\nThe name of the RDF graph in which the triple is.\nThe name of the RDF graph in which the triple is.\nEncodes that this triple is in an RDF dataset.\nEncodes that this triple is in an RDF dataset.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the underlying ID of this blank node.\nThe term that can’t be converted\nChecks if this literal could be seen as an RDF 1.0 plain …\nChecks if this literal could be seen as an RDF 1.0 plain …\nThe literal language tag if it is a language-tagged string.\nThe literal language tag if it is a language-tagged string.\nCreates a blank node from a unique identifier.\nCreates a blank node from a unique identifier.\nBuilds and validate an RDF IRI.\nBuilds and validate an RDF IRI\nBuilds an RDF triple.\nBuilds an RDF triple.\nBuilds an RDF triple in an RDF dataset.\nBuilds an RDF triple in an RDF dataset.\nCreates a variable name from a unique identifier.\nCreates a variable name from a unique identifier.\nCreates a blank node from a unique numerical id.\nBuilds an RDF language-tagged string.\nBuilds an RDF language-tagged string.\nBuilds an RDF language-tagged string.\nBuilds an RDF simple literal.\nBuilds an RDF simple literal.\nBuilds an RDF literal with a datatype.\nBuilds an RDF literal with a datatype.\nCreates a blank node from a unique identifier without …\nCreates a blank node from a unique identifier without …\nBuilds an RDF IRI from a string.\nBuilds an RDF IRI from a string.\nCreates a variable name from a unique identifier without …\nCreates a variable name from a unique identifier without …\nThe object of this triple.\nThe object of this triple.\nThe object of this triple.\nThe object of this triple.\nThe predicate of this triple.\nThe predicate of this triple.\nThe predicate of this triple.\nThe predicate of this triple.\nThe subject of this triple.\nThe subject of this triple.\nThe subject of this triple.\nThe subject of this triple.\nReturns the internal numerical ID of this blank node if it …\nThe literal lexical form.\nThe literal lexical form\nProvides ready to use <code>NamedNodeRef</code>s for basic RDF …\nAn algorithm used to canonicalize graph and datasets.\nAn in-memory RDF dataset.\nA read-only view on an RDF graph contained in a <code>Dataset</code>.\nIterator returned by <code>GraphView::iter</code>.\nA read/write view on an RDF graph contained in a <code>Dataset</code>.\nIterator returned by <code>Dataset::iter</code>.\nThe algorithm preferred by OxRDF.\nCanonicalizes the dataset by renaming blank nodes.\nReturns a map between the current dataset blank node and …\nClears the dataset.\nChecks if the dataset contains the given quad\nChecks if the graph contains the given triple.\nChecks if the graph contains the given triple.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nProvides a read-only view on an RDF graph contained in …\nProvides a read/write view on an RDF graph contained in …\nAdds a quad to the dataset.\nAdds a triple to the graph.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if this dataset contains a quad.\nChecks if this graph contains a triple.\nChecks if this graph contains a triple.\nReturns all the quads contained by the dataset.\nReturns all the triples contained by the graph.\nReturns all the triples contained by the graph\nReturns the number of quads in this dataset.\nReturns the number of triples in this graph.\nReturns the number of triples in this graph.\nCreates a new dataset\nRemoves a concrete quad from the dataset.\nRemoves a concrete triple from the graph.\nAn in-memory RDF graph.\nIterator returned by <code>Graph::iter</code>.\nCanonicalizes the dataset by renaming blank nodes.\nClears the graph.\nChecks if the graph contains the given triple.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAdds a triple to the graph.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if this graph contains a triple.\nReturns all the triples contained by the graph.\nReturns the number of triples in this graph.\nCreates a new graph.\nRemoves a concrete triple from the graph.\nGeoSpatial vocabulary.\nRDF vocabulary.\nRDFS vocabulary.\nRDF compatible XSD datatypes.\nGeospatial datatype like …\nThe class of containers of alternatives.\nThe class of unordered containers.\nThe first item in the subject RDF list.\nThe class of HTML literal values.\nThe class of language-tagged string literal values.\nThe class of RDF lists.\nThe empty list.\nThe object of the subject RDF statement.\nThe predicate of the subject RDF statement.\nThe class of RDF properties.\nThe rest of the subject RDF list after the first item.\nThe class of ordered containers.\nThe class of RDF statements.\nThe subject of the subject RDF statement.\nThe subject is an instance of a class.\nIdiomatic property used for structured values.\nThe class of XML literal values.\nThe class of classes.\nA description of the subject resource.\nThe class of RDF containers.\nThe class of container membership properties, <code>rdf:_1</code>, …\nThe class of RDF datatypes.\nA domain of the subject property.\nThe definition of the subject resource.\nA human-readable name for the subject.\nThe class of literal values, e.g. textual strings and …\nA member of the subject resource.\nA range of the subject property.\nThe class resource, everything.\nFurther information about the subject resource.\nThe subject is a subclass of a class.\nThe subject is a subproperty of a property.\nAbsolute or relative URIs and IRIs.\nBase64-encoded binary data.\ntrue, false.\n128…+127 (8 bit).\nDates (yyyy-mm-dd) with or without timezone.\nDate and time with or without timezone.\nDate and time with required timezone.\nDuration of time (days, hours, minutes, seconds only).\nArbitrary-precision decimal numbers.\n64-bit floating point numbers incl. ±Inf, ±0, NaN.\nDuration of time.\n32-bit floating point numbers incl. ±Inf, ±0, NaN.\nGregorian calendar day of the month.\nGregorian calendar month.\nGregorian calendar month and day.\nGregorian calendar year.\nGregorian calendar year and month.\nHex-encoded binary data.\n-2147483648…+2147483647 (32 bit).\nArbitrary-size integer numbers.\nLanguage tags per BCP47.\n-9223372036854775808…+9223372036854775807 (64 bit).\nXML Names.\nXML NCName.\nInteger numbers &lt;0.\nXML NMTOKENs.\nInteger numbers ≥0.\nInteger numbers ≤0.\nWhitespace-normalized strings.\nInteger numbers &gt;0.\n-32768…+32767 (16 bit).\nCharacter strings (but not all Unicode character strings).\nTimes (hh:mm:ss.sss…) with or without timezone.\nTokenized strings.\n0…255 (8 bit).\n0…4294967295 (32 bit).\n0…18446744073709551615 (64 bit).\n0…65535 (16 bit).\nDuration of time (months and years only).")
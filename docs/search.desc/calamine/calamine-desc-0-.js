searchState.loadedDescShard("calamine", 0, "Rust Excel/OpenDocument reader\nExpecting alphanumeric character\nUnsupported BErr\nBoolean\nBoolean\nA struct to hold cell position and value\nUnsupported cell error code\nCell error\nThe cell value is an error\nAn enum to represent all different errors that can appear …\nCell out of range\nCell ‘t’ attribute error\nA trait to constrain cells\nA struct to iterate over all cells\nCfb error\nChartSheet\nContinue Record is too short\nSerde specific error\nAn enum to represent all different data types that can …\nAn enum to represent all different data types that can …\nA trait to represent all different data types that can …\nDate or Time\nDate or Time\nDateTime\nDate, Time or DateTime in ISO 8601\nDate, Time or DateTime in ISO 8601\ncfb specific error\nA cell deserialization specific error enum\nThe deserializer.\nDialogSheet\nWrong dimension count\nDimensions info\nDivision by 0 error\nDuration in ISO 8601\nDuration in ISO 8601\nEmpty cell\nEmpty cell\nEnd of stream\nUnexpected end of file\nA struct to handle any error and a message\nError\nError\nError specific to file type\nInvalid etpg\nUnsupported etpg\nStructure for Excel date and time representation.\nExcel datetime type. Possible: date, time, datetime, …\nFile not found\nFile not found\nFile not found\nFirst non-empty row\nFloat\nFloat\nGetting data\nRequired header not found\nRow to use as header By default, the first non-empty row …\nHidden\nInvalid or unknown iftab\nUnsupported iftab\nSigned integer\nSigned integer\nInvalid Formula\nInvalid MIME\nIo error\nIo error\nIo error\nIo error\nIO error\nInvalid length\nMacroSheet\nCommon file metadata\nUnexpected error\nMismatch value\nGeneral error message\nUnavailable value error\nInvalid name error\nNo vba project\nThe specified sheet is not a worksheet\nNull value error\nNumber error\nNumeric column\nAn OpenDocument Spreadsheet document parser\nOds reader\nOds specific error\nAn enum for ods specific errors\nError while parsing string\nParse error\nError while parsing bool\nError while parsing float\nFloat error\nError while parsing integer\nParseInt error\nWorkbook is password protected\nWorkbook is password protected\nWorkbook is password protected\nWorkbook is password protected\nUnsupported Ptg\nA struct which represents a squared selection of cells\nA configured <code>Range</code> deserializer.\nBuilds a <code>Range</code> deserializer with some configuration …\nThere is no column component in the range string\nThere is no row component in the range string\nA trait to share spreadsheets reader functions across …\nA trait to share spreadsheets reader functions across …\nInvalid cell reference error\nRelationship not found\nIndex of the header row\nAn iterator to read <code>Range</code> struct row by row\nShared String\nMetadata of sheet\nType of sheet\nType of visible sheet\nA wrapper over all sheets when the file type is not known …\nCannot parse formula, stack is too short\nInvalid formula, stack length too short\nString\nString\nStruct with the key elements of a table\nTable not found\nTimeDelta (Duration)\nConstructs a deserializer for a <code>CellType</code>.\nUnexpected error\nUnexpected end of row\nUnexpected node\nUnrecognized data\nUnrecognized data\nUnrecognized data\nUnsupported type\nA struct to iterate over used cells\nValue error\nVba error\nVba error\nVba error\nvba specific error\nVBA module\nThe sheet is hidden and cannot be displayed using the user …\nVisible\nWide str length too long\nWorkSheet\nWorksheet not found\nWorksheet not found\nWorksheet not found\nWorksheet not found\nA struct representing an old xls format file (CFB)\nXls reader\nxls specific error\nAn enum to handle Xls specific errors\nOptions to perform specialized parsing.\nA Xlsb reader\nXlsb reader\nxlsb specific error\nA Xlsb specific error\nA struct representing xml zipped excel file Xlsx, Xlsm, …\nXlsx reader\nxlsx specific error\nAn enum for Xlsx specific errors\nXml error\nXml error\nXml error\nXml attribute error\nXml attribute error\nXml attribute error\nUnexpected end of xml\nZip error\nZip error\nZip error\nTry converting data type into a float\nConverting data type into a float\nTry converting data type into an int\nTry converting data type into a string\nGet an iterator over all cells in this range\nGet the names of the columns in the order they occur\ncheck if a position is in it\nGet a range representing the data from the table (excludes …\nGet all defined names (Ranges names etc)\nBuild a <code>RangeDeserializer</code> from this configuration.\nA helper function to deserialize cell values as <code>f64</code>, …\nA helper function to deserialize cell values as <code>f64</code>, …\nA helper function to deserialize cell values as <code>i64</code>, …\nA helper function to deserialize cell values as <code>i64</code>, …\nCreates a new empty range\nGet bottom right cell position (row, column)\nend: (row, col)\nForce a spreadsheet to be interpreted using a particular …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuild a <code>RangeDeserializer</code> from this configuration.\nCreates a <code>Range</code> from a coo sparse vector of <code>Cell</code>s.\nGet cell value from <strong>relative position</strong>.\nTry getting bool value\nTry getting Error value\nTry getting float value\nTry getting int value\nGets <code>Cell</code> position\nGet size in (height, width) format\nTry getting string value\nGets <code>Cell</code> value\nGet cell value from <strong>absolute position</strong>.\nDecide whether to treat the first row as a special header …\nRow to use as header\nGet range headers.\nGet column height\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAssess if datatype is a bool\nAssess if datatype is empty\nAssess if the cell is empty.\nIs range empty\nAssess if datatype is a CellErrorType\nAssess if datatype is a float\nAssess if datatype is a int\nAssess if datatype is a string\nlen\nLoad the merged regions\nLoad the tables from\nGet the merged regions of all the sheets\nGet the merged regions by sheet name\nInitialize\nInitialize\nRead sheets from workbook.xml and get their corresponding …\nParses Workbook stream, no need for the relationships …\nGet the name of the table\nName\nCreates a new instance.\nCreates a new instance.\nCreates a new <code>ExcelDateTime</code>\nConstructs a new builder for configuring <code>Range</code> …\ncreate dimensions info with start position and end position\nCreates a new <code>Cell</code>\nCreates a new non-empty <code>Range</code>\nCreates a new instance using <code>Options</code> to inform parsing.\nConvenient function to open a file with a BufReader\nOpens a workbook and define the file type at runtime.\nOpens a workbook from the given bytes.\nConvenient function to open a file with a BufReader\nBuild a new <code>Range</code> out of this range\nGet an iterator over inner rows\nSet inner value from absolute position\nGet the name of the sheet that table exists within\nGet all sheet names of this workbook, in workbook order\nFetch all sheets metadata\nGet top left cell position (row, column)\nstart: (row, col)\nGet the table by name (owned)\nGet the table by name (ref)\nGet the names of all the tables\nGet the names of all the tables in a sheet\nConstruct a <code>CellType</code> deserializer at the specified …\nType Only Excel formats support this. Default value for …\nGet an iterator over used cells only\nParse vbaProject.bin file\nGets <code>VbaProject</code>\nGets <code>VbaProject</code>\nGets <code>VbaProject</code>\nVisible\nGet column width\nBuild a <code>RangeDeserializer</code> from this configuration and keep …\nSet header row (i.e. first row to be read) If <code>header_row</code> …\nBuild a <code>RangeDeserializer</code> from this configuration and keep …\nGet a cells reader for a given worksheet\nGet a reader over all used cells in the given worksheet …\nRead worksheet formula in corresponding worksheet path\nRead worksheet formula in corresponding worksheet path\nRead worksheet data in corresponding worksheet path\nMS-XLSB 2.1.7.62\nGets the worksheet merge cell dimensions\nGets the worksheet merge cell dimensions\nGet the nth worksheet. Shortcut for getting the nth …\nGet the nth worksheet. Shortcut for getting the nth …\nRead worksheet data in corresponding worksheet path\nRead worksheet data in corresponding worksheet path\nRead worksheet data in corresponding worksheet path\nMS-XLSB 2.1.7.62\nGet the nth worksheet. Shortcut for getting the nth …\nGet the nth worksheet range where shared string values are …\nGet worksheet range where shared string values are only …\nFetch all worksheet data &amp; paths\nMS-XLSB 2.1.7.62\nCell value error\nMinimum position\nCell position\nCell position\nPosition tried\nExpected\nFound\nexpected length\nfound length\nstack size\ndata type\nlength type\nvalue found\nbuffer length\nexpected\nfound\ndata type\nvalue found\nwide str length\ndata type\nvalue found\nError comes from a cfb parsing\nInvalid record id\nIo error\nInvalid libid format\nCannot find module\nA vba reference\nGeneric unknown u16 value\nA VBA specific error enum\nA struct for managing VBA reading\ndescription\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>VbaProject</code> out of a Compound File Binary and …\nReads module content and tries to convert to utf8\nGets the list of <code>Module</code> names\nReads module content (MBCS encoded) and output it as-is …\nGets the list of <code>Reference</code>s\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the reference location is accessible\nname\nCreate a new <code>VbaProject</code> out of the vbaProject.bin <code>ZipFile</code> …\nlocation of the reference\nexpected record id\nrecord if found\nerror type\nvalue found")
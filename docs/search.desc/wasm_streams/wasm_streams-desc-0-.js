searchState.loadedDescShard("wasm_streams", 0, "Working with the Web Streams API in Rust.\nBindings and conversions for readable streams.\nBindings and conversions for transform streams.\nBindings and conversions for writable streams.\nAn <code>AsyncRead</code> for the <code>into_async_read</code> method.\nA <code>Stream</code> for the <code>into_stream</code> method.\nOptions for <code>pipe_to_with_options</code>.\nA <code>ReadableStream</code>.\nA <code>ReadableStreamBYOBReader</code> that can be used to read chunks …\nA <code>ReadableStreamDefaultReader</code> that can be used to read …\nAcquires a reference to the underlying JavaScript reader.\nAcquires a reference to the underlying JavaScript reader.\nAcquires a reference to the underlying JavaScript stream.\nCancels the stream, signaling a loss of interest in the …\nCancels the stream, signaling a loss of interest in the …\nCancels the stream, signaling a loss of interest in the …\nCancels the stream, signaling a loss of interest in the …\nCancels the stream, signaling a loss of interest in the …\nCancels the stream, signaling a loss of interest in the …\nCancels the stream, signaling a loss of interest in the …\nCancels the stream, signaling a loss of interest in the …\nCancels the stream, signaling a loss of interest in the …\nCancels the stream, signaling a loss of interest in the …\nWaits for the stream to become closed.\nWaits for the stream to become closed.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEquivalent to <code>from_stream</code>.\nCreates a new <code>ReadableStream</code> from an <code>AsyncRead</code>.\nCreates a set of pipe options from a raw <code>PipeOptions</code> …\nCreates a new <code>ReadableStream</code> from a JavaScript stream.\nCreates a new <code>ReadableStream</code> from a <code>Stream</code>.\nCreates a BYOB reader and locks the stream to the new …\nCreates a default reader and locks the stream to the new …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this <code>ReadableStreamBYOBReader</code> into an <code>AsyncRead</code>.\nConverts this <code>ReadableStream</code> into an <code>AsyncRead</code>.\nConvert this to a raw <code>PipeOptions</code> object.\nConsumes this <code>ReadableStream</code>, returning the underlying …\nConverts this <code>ReadableStreamDefaultReader</code> into a <code>Stream</code>.\nConverts this <code>ReadableStream</code> into a <code>Stream</code>.\nReturns <code>true</code> if the stream is locked to a reader.\nCreates a blank new set of pipe options.\nPipes this readable stream to a given writable stream.\nPipes this readable stream to a given writable stream.\nSets whether the destination writable stream should be …\nSets whether the source readable stream should be canceled …\nSets whether the destination writable stream should be …\nReads the next chunk from the stream’s internal queue …\nReads the next chunk from the stream’s internal queue.\nReads the next chunk from the stream’s internal queue …\nReleases this reader’s lock on the corresponding stream.\nReleases this reader’s lock on the corresponding stream.\nSets an abort signal to abort the ongoing pipe operation. …\nRaw bindings to JavaScript objects used by a <code>ReadableStream</code>…\nTees this readable stream, returning the two resulting …\nTry to create a BYOB reader and lock the stream to the new …\nTry to create a default reader and lock the stream to the …\nTry to convert this <code>ReadableStream</code> into an <code>AsyncRead</code>.\nTry to convert this <code>ReadableStream</code> into a <code>Stream</code>.\nTry to release this reader’s lock on the corresponding …\nTry to release this reader’s lock on the corresponding …\nTries to tee this readable stream, returning the two …\nAn <code>ArrayBufferView</code>.\nRaw options for <code>pipeTo()</code>.\nA raw <code>ReadableByteStreamController</code>.\nA raw <code>ReadableStream</code>.\nA result returned by <code>ReadableStreamBYOBReader.read</code>.\nA raw <code>ReadableStreamBYOBReader</code>.\nA raw <code>ReadableStreamBYOBRequest</code>.\nA raw <code>ReadableStreamDefaultController</code>.\nA result returned by <code>ReadableStreamDefaultReader.read</code>.\nA raw <code>ReadableStreamDefaultReader</code>.\nA raw <code>ReadableStreamGenericReader</code>.\nRaw options for <code>getReader()</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA <code>TransformStream</code>.\nAcquires a reference to the underlying JavaScript stream.\nReturns the argument unchanged.\nCreates a new <code>TransformStream</code> from a JavaScript stream.\nCalls <code>U::from(self)</code>.\nConsumes this <code>TransformStream</code>, returning the underlying …\nReturns the readable side of the transform stream.\nRaw bindings to JavaScript objects used by a …\nReturns the writable side of the transform stream.\nA raw <code>TransformStream</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn <code>AsyncWrite</code> for the <code>into_async_write</code> method.\nA <code>Sink</code> for the <code>into_sink</code> method.\nA <code>WritableStream</code>.\nA <code>WritableStreamDefaultWriter</code> that can be used to write …\nAborts the stream, signaling that the producer can no …\nAborts the stream, signaling that the producer can no …\nAborts the stream, signaling that the producer can no …\nAborts the stream, signaling that the producer can no …\nAborts the stream with the given <code>reason</code>, signaling that …\nAborts the stream, signaling that the producer can no …\nAborts the stream, signaling that the producer can no …\nAborts the stream with the given <code>reason</code>, signaling that …\nAcquires a reference to the underlying JavaScript writer.\nAcquires a reference to the underlying JavaScript stream.\nCloses the stream.\nWaits for the stream to become closed.\nReturns the desired size to fill the stream’s internal …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEquivalent to <code>from_sink</code>.\nReturns the argument unchanged.\nCreates a new <code>WritableStream</code> from a JavaScript stream.\nCreates a new <code>WritableStream</code> from a <code>Sink</code>.\nCreates a writer and locks the stream to the new writer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this <code>WritableStreamDefaultWriter</code> into an …\nConverts this <code>WritableStream</code> into an <code>AsyncWrite</code>.\nConsumes this <code>WritableStream</code>, returning the underlying …\nConverts this <code>WritableStreamDefaultWriter</code> into a <code>Sink</code>.\nConverts this <code>WritableStream</code> into a <code>Sink</code>.\nReturns <code>true</code> if the stream is locked to a writer.\nWaits until the desired size to fill the stream’s …\nRaw bindings to JavaScript objects used by a <code>WritableStream</code>…\nTry to create a writer and lock the stream to the new …\nTry to convert this <code>WritableStream</code> into an <code>AsyncWrite</code>.\nTry to convert this <code>WritableStream</code> into a <code>Sink</code>.\nWrites the given <code>chunk</code> to the writable stream, by waiting …\nA raw <code>WritableStream</code>.\nA raw <code>WritableStreamDefaultWriter</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")
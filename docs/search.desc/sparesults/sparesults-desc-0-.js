searchState.loadedDescShard("sparesults", 0, "Sparesults\nSPARQL Query Results CSV Format\nI/O error during parsing (file not found…).\nSPARQL Query Results JSON Format\nSPARQL query results serialization formats.\nError returned during SPARQL result formats format parsing.\nParsers for SPARQL query results serialization formats.\nA serializer for SPARQL query results serialization …\nAn error in the syntax of the parsed file.\nThe reader for a given read of a results file.\nA streaming parser of a set of <code>QuerySolution</code> solutions.\nThe reader for a given read of a results file.\nA streaming parser of a set of <code>QuerySolution</code> solutions.\nAn error in the file syntax.\nA position in a text i.e. a <code>line</code> number starting from 0, a …\nSPARQL Query Results TSV Format\nAllows writing query results into a <code>Write</code> implementation.\nSPARQL Query Results XML Format\nThe format IANA-registered file extension.\nWrites the last bytes of the file.\nReads a result file from a <code>Read</code> implementation.\nReads a result file from a <code>Read</code> implementation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLooks for a known format from an extension.\nBuilds a parser for the given format.\nBuilds a serializer for the given format.\nLooks for a known format from a media type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe format canonical IRI according to the Unique URIs for …\nThe location of the error inside of the file.\nThe format IANA media type.\nThe format name.\nWrites a solution.\nWrite a boolean query result (from an <code>ASK</code> query)  into the …\nReturns a <code>SolutionsSerializer</code> allowing writing query …\nDefinition of <code>QuerySolution</code> structure and associated …\nOrdered list of the declared variables at the beginning of …\nOrdered list of the declared variables at the beginning of …\nAn iterator over <code>QuerySolution</code> bound variables.\nTuple associating variables and terms that are the result …\nA utility trait to get values for a given variable or …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a value for a given position in the tuple (<code>usize</code>) …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs there any variable bound in the table?\nReturns an iterator over bound variables.\nThe number of variables which could be bound.\nReturns the ordered slice of variable values.\nReturns the ordered slice of the solution variables, bound …")
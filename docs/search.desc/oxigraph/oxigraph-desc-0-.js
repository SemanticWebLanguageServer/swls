searchState.loadedDescShard("oxigraph", 0, "Oxigraph\nUtilities to read and write RDF graphs and datasets using …\nImplements data structures for RDF 1.1 Concepts using OxRDF…\nSPARQL implementation.\nAPI to access an on-disk RDF dataset.\nRDF dataset serialization formats.\nRDF graph serialization formats.\nI/O error during parsing (file not found…).\nN3\nN-Quads\nN-Quads\nN-Triples\nN-Triples\nRDF serialization formats.\nError returned during RDF format parsing.\nParsers for RDF serialization formats.\nA serializer for RDF serialization formats.\nAn error in the syntax of the parsed file.\nRDF/XML\nRDF/XML\nParses a RDF file from a <code>Read</code> implementation.\nParses a RDF file from a byte slice.\nAn error in the file syntax.\nA position in a text i.e. a <code>line</code> number starting from 0, a …\nTriG\nTriG\nTurtle\nTurtle\nSerializes quads or triples to a <code>Write</code> implementation.\nThe base IRI considered at the current step of the parsing.\nThe base IRI considered at the current step of the parsing.\nThe format IANA-registered file extension.\nThe format IANA-registered file extension.\nThe format IANA-registered file extension.\nWrites the last bytes of the file\nParses from a <code>Read</code> implementation and returns an iterator …\nParses from a byte slice and returns an iterator of quads.\nSerializes to a <code>Write</code> implementation.\nThe format the parser uses.\nThe format the serializer serializes to.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLooks for a known format from an extension.\nLooks for a known format from an extension.\nLooks for a known format from an extension.\nBuilds a parser for the given format.\nBuilds a serializer for the given format\nLooks for a known format from a media type.\nLooks for a known format from a media type.\nLooks for a known format from a media type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe format canonical IRI according to the Unique URIs for …\nThe format canonical IRI according to the Unique URIs for …\nThe format canonical IRI according to the Unique URIs for …\nThe location of the error inside of the file.\nThe format IANA media type.\nThe format IANA media type.\nThe format IANA media type.\nThe format name.\nThe list of IRI prefixes considered at the current step of …\nThe list of IRI prefixes considered at the current step of …\nUtilities to read RDF graphs and datasets.\nRenames the blank nodes ids from the ones set in the …\nSerializes a <code>QuadRef</code>\nSerializes a <code>TripleRef</code>\nChecks if the formats supports RDF datasets and not only …\nChecks if the formats supports RDF-star quoted triples.\nAttempts to find a graph format that is a subset of this …\nAttempts to find a dataset format that is a superset of …\nAssumes the file is valid to make parsing faster.\nProvides an IRI that could be used to resolve the file …\nIf the format supports it, sets a base IRI.\nProvides the name graph name that should replace the …\nIf the format supports it, sets a prefix.\nSets that the parser must fail if parsing a named graph.\nUtilities to write RDF graphs and datasets.\nA parser for RDF dataset serialization formats.\nParsers for RDF graph serialization formats.\nAn iterator yielding read quads. Could be built using a …\nAn iterator yielding read triples. Could be built using a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuilds a parser for the given format.\nBuilds a parser for the given format.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExecutes the parsing itself on a <code>Read</code> implementation and …\nExecutes the parsing itself on a <code>Read</code> implementation and …\nProvides an IRI that could be used to resolve the file …\nProvides an IRI that could be used to resolve the file …\nA serializer for RDF graph serialization formats.\nA serializer for RDF graph serialization formats.\nAllows writing triples. Could be built using a …\nAllows writing triples. Could be built using a …\nWrites the last bytes of the file\nWrites the last bytes of the file\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuilds a serializer for the given format\nBuilds a serializer for the given format\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a <code>QuadWriter</code> allowing writing triples into the …\nReturns a <code>TripleWriter</code> allowing writing triples into the …\nWrites a triple\nWrites a quad\nAn owned RDF blank node.\nAn error raised during <code>BlankNode</code> IDs validation.\nA borrowed RDF blank node.\nAn in-memory RDF dataset.\nAn in-memory RDF graph.\nAn owned graph name\nA borrowed graph name\nAn error raised during <code>Iri</code> or <code>IriRef</code> validation.\nAn error raised during <code>LanguageTag</code> validation.\nAn owned RDF literal.\nA borrowed RDF literal.\nAn owned RDF IRI.\nA borrowed RDF IRI.\nThe owned union of IRIs and blank nodes.\nThe borrowed union of IRIs and blank nodes.\nAn owned triple in an RDF dataset.\nA borrowed triple in an RDF dataset.\nThe owned union of IRIs, blank nodes  and triples (if the …\nThe borrowed union of IRIs, blank nodes and triples (if …\nAn owned RDF term\nAn error raised during term serialization parsing using …\nA borrowed RDF term\nAn owned RDF triple.\nA borrowed RDF triple.\nAn error return by some <code>TryFrom&lt;Term&gt;</code>  implementations.\nA SPARQL query owned variable.\nAn error raised during <code>Variable</code> name validation.\nA SPARQL query borrowed variable.\nReturns the underlying ID of this blank node.\nReturns the underlying ID of this blank node.\nCanonicalizes the dataset by renaming blank nodes.\nCanonicalizes the dataset by renaming blank nodes.\nReturns a map between the current dataset blank node and …\nClears the dataset.\nClears the graph.\nChecks if the dataset contains the given quad\nChecks if the graph contains the given triple.\nIn-memory implementation of RDF datasets.\nThe literal datatype.\nThe literal datatype.\nBuilds a new RDF blank node with a unique id.\nExtract components from this literal (value, datatype and …\nExtract components from this literal\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParses a blank node from its NTriples serialization\nParses a literal from its NTriples serialization\nParses a named node from its NTriples and Turtle …\nParses a term from its NTriples serialization\nParses a triple from its NTriples serialization\nParses a triple from its NQuads serialization\nBuilds an RDF triple from <code>Term</code>s.\nIn-memory implementation of RDF graphs.\nProvides a read-only view on an RDF graph contained in …\nProvides a read/write view on an RDF graph contained in …\nThe name of the RDF graph in which the triple is.\nThe name of the RDF graph in which the triple is.\nEncodes that this triple is in an RDF dataset.\nEncodes that this triple is in an RDF dataset.\nAdds a quad to the dataset.\nAdds a triple to the graph.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the underlying ID of this blank node.\nThe term that can’t be converted\nChecks if this dataset contains a quad.\nChecks if this graph contains a triple.\nChecks if this literal could be seen as an RDF 1.0 plain …\nChecks if this literal could be seen as an RDF 1.0 plain …\nReturns all the quads contained by the dataset.\nReturns all the triples contained by the graph.\nThe literal language tag if it is a language-tagged string.\nThe literal language tag if it is a language-tagged string.\nReturns the number of quads in this dataset.\nReturns the number of triples in this graph.\nCreates a blank node from a unique identifier.\nCreates a blank node from a unique identifier.\nCreates a new dataset\nCreates a new graph.\nBuilds and validate an RDF IRI.\nBuilds and validate an RDF IRI\nBuilds an RDF triple.\nBuilds an RDF triple.\nBuilds an RDF triple in an RDF dataset.\nBuilds an RDF triple in an RDF dataset.\nCreates a variable name from a unique identifier.\nCreates a blank node from a unique numerical id.\nBuilds an RDF language-tagged string.\nBuilds an RDF language-tagged string.\nBuilds an RDF language-tagged string.\nBuilds an RDF simple literal.\nBuilds an RDF simple literal.\nBuilds an RDF literal with a datatype.\nBuilds an RDF literal with a datatype.\nCreates a blank node from a unique identifier without …\nCreates a blank node from a unique identifier without …\nBuilds an RDF IRI from a string.\nBuilds an RDF IRI from a string.\nCreates a variable name from a unique identifier without …\nThe object of this triple.\nThe object of this triple.\nThe object of this triple.\nThe object of this triple.\nThe predicate of this triple.\nThe predicate of this triple.\nThe predicate of this triple.\nThe predicate of this triple.\nRemoves a concrete quad from the dataset.\nRemoves a concrete triple from the graph.\nThe subject of this triple.\nThe subject of this triple.\nThe subject of this triple.\nThe subject of this triple.\nReturns the internal numerical ID of this blank node if it …\nThe literal lexical form.\nThe literal lexical form\nProvides ready to use <code>NamedNodeRef</code>s for basic RDF …\nAn algorithm used to canonicalize graph and datasets.\nAn in-memory RDF dataset.\nA read-only view on an RDF graph contained in a <code>Dataset</code>.\nIterator returned by <code>GraphView::iter</code>.\nA read/write view on an RDF graph contained in a <code>Dataset</code>.\nIterator returned by <code>Dataset::iter</code>.\nThe algorithm preferred by OxRDF.\nChecks if the graph contains the given triple.\nChecks if the graph contains the given triple.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAdds a triple to the graph.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if this graph contains a triple.\nChecks if this graph contains a triple.\nReturns all the triples contained by the graph.\nReturns all the triples contained by the graph\nReturns the number of triples in this graph.\nReturns the number of triples in this graph.\nRemoves a concrete triple from the graph.\nAn algorithm used to canonicalize graph and datasets.\nAn in-memory RDF graph.\nIterator returned by <code>Graph::iter</code>.\nThe algorithm preferred by OxRDF.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGeoSpatial vocabulary.\nRDF vocabulary.\nRDFS vocabulary.\nRDF compatible XSD datatypes.\nGeospatial datatype like …\nThe class of containers of alternatives.\nThe class of unordered containers.\nThe first item in the subject RDF list.\nThe class of HTML literal values.\nThe class of language-tagged string literal values.\nThe class of RDF lists.\nThe empty list.\nThe object of the subject RDF statement.\nThe predicate of the subject RDF statement.\nThe class of RDF properties.\nThe rest of the subject RDF list after the first item.\nThe class of ordered containers.\nThe class of RDF statements.\nThe subject of the subject RDF statement.\nThe subject is an instance of a class.\nIdiomatic property used for structured values.\nThe class of XML literal values.\nThe class of classes.\nA description of the subject resource.\nThe class of RDF containers.\nThe class of container membership properties, <code>rdf:_1</code>, …\nThe class of RDF datatypes.\nA domain of the subject property.\nThe definition of the subject resource.\nA human-readable name for the subject.\nThe class of literal values, e.g. textual strings and …\nA member of the subject resource.\nA range of the subject property.\nThe class resource, everything.\nFurther information about the subject resource.\nThe subject is a subclass of a class.\nThe subject is a subproperty of a property.\nAbsolute or relative URIs and IRIs.\nBase64-encoded binary data.\ntrue, false.\n128…+127 (8 bit).\nDates (yyyy-mm-dd) with or without timezone.\nDate and time with or without timezone.\nDate and time with required timezone.\nDuration of time (days, hours, minutes, seconds only).\nArbitrary-precision decimal numbers.\n64-bit floating point numbers incl. ±Inf, ±0, NaN.\nDuration of time.\n32-bit floating point numbers incl. ±Inf, ±0, NaN.\nGregorian calendar day of the month.\nGregorian calendar month.\nGregorian calendar month and day.\nGregorian calendar year.\nGregorian calendar year and month.\nHex-encoded binary data.\n-2147483648…+2147483647 (32 bit).\nArbitrary-size integer numbers.\nLanguage tags per BCP47.\n-9223372036854775808…+9223372036854775807 (64 bit).\nXML Names.\nXML NCName.\nInteger numbers &lt;0.\nXML NMTOKENs.\nInteger numbers ≥0.\nInteger numbers ≤0.\nWhitespace-normalized strings.\nInteger numbers &gt;0.\n-32768…+32767 (16 bit).\nCharacter strings (but not all Unicode character strings).\nTimes (hh:mm:ss.sss…) with or without timezone.\nTokenized strings.\n0…255 (8 bit).\n0…4294967295 (32 bit).\n0…18446744073709551615 (64 bit).\n0…65535 (16 bit).\nDuration of time (months and years only).\nResult of a ASK query.\nThe service evaluation error.\nA SPARQL evaluation error.\nResults of a CONSTRUCT or DESCRIBE query.\nError when <code>CREATE</code> tries to create an already existing graph\nError when <code>DROP</code> or <code>CLEAR</code> tries to remove a not existing …\nAn error while parsing an external RDF file.\nThe results are not a RDF graph\nAn error in SPARQL parsing.\nA parsed SPARQL query.\nA SPARQL query dataset specification\nThe explanation of a query.\nOptions for SPARQL query evaluation.\nResults of a SPARQL query.\nTuple associating variables and terms that are the result …\nAn iterator over <code>QuerySolution</code>s.\nAn iterator over the triples that compose a graph solution.\nAn error while parsing an external result file (likely …\nAn error returned during results serialization.\nError during <code>SERVICE</code> evaluation\nThe <code>SERVICE</code> call has not returns solutions\nHandler for SPARQL 1.1 Federated Query SERVICE.\nResults of a SELECT query.\nError returned during SPARQL parsing.\nAn error from the storage.\nThe variable storing the <code>SERVICE</code> name is unbound\nThe given content media type returned from an HTTP …\nThe given <code>SERVICE</code> is not supported\nA parsed SPARQL update.\nOptions for SPARQL update evaluation.\nA SPARQL query owned variable.\nAn error raised during <code>Variable</code> name validation.\nReturns the list of the available named graphs for the …\nReturns the query dataset specification\nReturns the query dataset specification\nReturns the list of the store graphs that are available to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParses a variable from its SPARQL serialization\nReturns a value for a given position in the tuple (<code>usize</code>) …\nEvaluates a <code>Query</code> against a given service identified by a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if this dataset specification is the default one …\nIs there any variable bound in the table?\nReturns an iterator over bound variables.\nThe number of variables which could be bound.\nConstruct a new iterator of solution from an ordered list …\nCreates a variable name from a unique identifier.\nCreates a variable name from a unique identifier without …\nParses a SPARQL query with an optional base IRI to resolve …\nParses a SPARQL update with an optional base IRI to …\nReads a SPARQL query results serialization.\nUtilities to read and write RDF results formats  using …\nSets the list of allowed named graphs in the query.\nSets the list of graphs the query should consider as being …\nSets if the default graph for the query should be the …\nReturns the query dataset specification in DELETE/INSERT …\nReturns the query dataset specification in DELETE/INSERT …\nReturns the ordered slice of variable values.\nReturns the ordered slice of the solution variables, bound …\nThe variables used in the solutions.\nAdds a custom SPARQL evaluation function.\nUse a given <code>ServiceHandler</code> to execute SPARQL 1.1 Federated …\nDisables the <code>SERVICE</code> calls\nWrites the query results (solutions or boolean).\nWrites the graph query results.\nWrites the explanation as JSON.\nSPARQL Query Results CSV Format\nI/O error during parsing (file not found…).\nSPARQL Query Results JSON Format\nSPARQL query results serialization formats.\nError returned during SPARQL result formats format parsing.\nParsers for SPARQL query results serialization formats.\nA serializer for SPARQL query results serialization …\nAn error in the syntax of the parsed file.\nTuple associating variables and terms that are the result …\nThe reader for a given read of a results file.\nA streaming parser of a set of <code>QuerySolution</code> solutions.\nThe reader for a given read of a results file.\nA streaming parser of a set of <code>QuerySolution</code> solutions.\nAn error in the file syntax.\nA position in a text i.e. a <code>line</code> number starting from 0, a …\nSPARQL Query Results TSV Format\nAllows writing query results into a <code>Write</code> implementation.\nSPARQL Query Results XML Format\nThe format IANA-registered file extension.\nWrites the last bytes of the file.\nReads a result file from a <code>Read</code> implementation.\nReads a result file from a <code>Read</code> implementation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLooks for a known format from an extension.\nBuilds a parser for the given format.\nBuilds a serializer for the given format.\nLooks for a known format from a media type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe format canonical IRI according to the Unique URIs for …\nThe location of the error inside of the file.\nThe format IANA media type.\nThe format name.\nWrites a solution.\nWrite a boolean query result (from an <code>ASK</code> query)  into the …\nReturns a <code>SolutionsSerializer</code> allowing writing query …\nDefinition of <code>QuerySolution</code> structure and associated …\nOrdered list of the declared variables at the beginning of …\nOrdered list of the declared variables at the beginning of …\nAn iterator over <code>QuerySolution</code> bound variables.\nTuple associating variables and terms that are the result …\nA utility trait to get values for a given variable or …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA bulk loader allowing to load at lot of data quickly into …\nError related to data corruption.\nAn error return if some content in the database is …\nA format compatible with RDF dataset is required.\nAn iterator returning the graph names contained in a <code>Store</code>.\nThe base IRI is invalid.\nError from the OS I/O layer.\nAn error raised while writing the content.\nAn error raised while loading a file into a <code>Store</code>.\nAn error raised while reading the file.\nAn iterator returning the quads contained in a <code>Store</code>.\nAn error raised while writing a file from a <code>Store</code>.\nAn error raised during the insertion in the store.\nAn error raised during the lookup in the store.\nAn error related to storage operations (reads, writes…).\nAn on-disk RDF dataset. Allows to query and update it …\nAn object to do operations during a transaction.\nCreates a bulk loader allowing to load at lot of data …\nClears the store.\nClears the store.\nClears a graph from this store.\nClears a graph from this store.\nChecks if this store contains a given quad.\nChecks if this store contains a given quad.\nChecks if the store contains a given graph.\nChecks if the store contains a given graph\nDumps the store into a file.\nDumps a store graph into a file.\nDumps a store graph into a file.\nDumps the store into a file.\nExecutes a SPARQL 1.1 query with some options and returns …\nAdds a set of quads to this store.\nAdds atomically a set of quads to this store.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAdds a quad to this store.\nAdds a quad to this store.\nInserts a graph into this store.\nInserts a graph into this store.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns if the store is empty.\nReturns if the store is empty.\nReturns all the quads contained in the store.\nReturns all the quads contained in the store.\nReturns the number of quads in the store.\nReturns the number of quads in the store.\nLoads a dataset file (i.e. quads) into the store.\nLoads a dataset file using the bulk loader.\nLoads a dataset file (i.e. quads) into the store.\nLoads a RDF file into the store.\nLoads a file using the bulk loader.\nLoads a RDF file under into the store.\nLoads a graph file (i.e. triples) into the store.\nLoads a graph file using the bulk loader.\nLoads a graph file (i.e. triples) into the store.\nAdds a set of quads using the bulk loader while breaking …\nAdds a set of quads using the bulk loader.\nReturns all the store named graphs.\nReturns all the store named graphs.\nNew in-memory <code>Store</code> without RocksDB.\nAdds a <code>callback</code> catching all parse errors and choosing if …\nAdds a <code>callback</code> evaluated from time to time with the …\nRetrieves quads with a filter on each quad component.\nRetrieves quads with a filter on each quad component\nExecutes a SPARQL 1.1 query.\nExecutes a SPARQL 1.1 query.\nExecutes a SPARQL 1.1 query with some options.\nExecutes a SPARQL 1.1 query with some options.\nRemoves a quad from this store.\nRemoves a quad from this store.\nRemoves a graph from this store.\nRemoves a graph from this store.\nExecutes a transaction.\nExecutes a SPARQL 1.1 update.\nExecutes a SPARQL 1.1 update.\nExecutes a SPARQL 1.1 update with some options.\nExecutes a SPARQL 1.1 update with some options.\nSets a rough idea of the maximal amount of memory to be …\nSets the maximal number of threads to be used by the bulk …\nThe parsing error.\nThe IRI itself.")